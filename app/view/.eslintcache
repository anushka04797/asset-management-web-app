[{"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\index.js":"1","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\ThemeWrapper\\ThemeWrapper.js":"2","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\BackgroundColorWrapper\\BackgroundColorWrapper.js":"3","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\ProtectedRoute\\ProtectedRoute.js":"4","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\layouts\\Admin\\Admin.js":"5","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\layouts\\RTL\\RTL.js":"6","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\store\\store.js":"7","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\pages\\forgot-password\\ForgotPass.js":"8","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\pages\\login\\Login.js":"9","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\config.js":"10","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\store\\slices\\authSlice.js":"11","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\store\\slices\\portableGeneratorSlice.js":"12","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\store\\slices\\userSlice.js":"13","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\contexts\\ThemeContext.js":"14","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\contexts\\BackgroundColorContext.js":"15","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\routes.js":"16","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\Navbars\\RTLNavbar.js":"17","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\Navbars\\AdminNavbar.js":"18","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\Footer\\Footer.js":"19","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\Sidebar\\Sidebar.js":"20","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\FixedPlugin\\FixedPlugin.js":"21","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\helper.js":"22","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\views\\Users.js":"23","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\views\\Dashboard.js":"24","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\views\\UserProfile.js":"25","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\data\\data.js":"26","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\views\\Map.js":"27","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\google-map\\GoogleMap.js":"28","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\google-map\\Tracking.js":"29","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\OwnerUpdateModal\\OwnerUpdateModal.js":"30","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\google-map\\Marker.js":"31","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\variables\\charts.js":"32","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\MailTo\\MailTo.js":"33"},{"size":2495,"mtime":1644145066041,"results":"34","hashOfConfig":"35"},{"size":723,"mtime":1644145066039,"results":"36","hashOfConfig":"35"},{"size":516,"mtime":1644145066036,"results":"37","hashOfConfig":"35"},{"size":507,"mtime":1644145066038,"results":"38","hashOfConfig":"35"},{"size":4970,"mtime":1645074407846,"results":"39","hashOfConfig":"35"},{"size":5073,"mtime":1644145066041,"results":"40","hashOfConfig":"35"},{"size":344,"mtime":1644145066044,"results":"41","hashOfConfig":"35"},{"size":116,"mtime":1644145066042,"results":"42","hashOfConfig":"35"},{"size":6903,"mtime":1646028234496,"results":"43","hashOfConfig":"35"},{"size":3627,"mtime":1645962404679,"results":"44","hashOfConfig":"35"},{"size":1194,"mtime":1644901548861,"results":"45","hashOfConfig":"35"},{"size":1225,"mtime":1645000279592,"results":"46","hashOfConfig":"35"},{"size":1038,"mtime":1644145066043,"results":"47","hashOfConfig":"35"},{"size":212,"mtime":1644145066040,"results":"48","hashOfConfig":"35"},{"size":266,"mtime":1644145066040,"results":"49","hashOfConfig":"35"},{"size":2653,"mtime":1645961641518,"results":"50","hashOfConfig":"35"},{"size":6569,"mtime":1644145066038,"results":"51","hashOfConfig":"35"},{"size":7792,"mtime":1644903289690,"results":"52","hashOfConfig":"35"},{"size":1094,"mtime":1644145066037,"results":"53","hashOfConfig":"35"},{"size":4679,"mtime":1644918041786,"results":"54","hashOfConfig":"35"},{"size":3735,"mtime":1644145066036,"results":"55","hashOfConfig":"35"},{"size":20416,"mtime":1644145066040,"results":"56","hashOfConfig":"35"},{"size":8260,"mtime":1645541595532,"results":"57","hashOfConfig":"35"},{"size":36675,"mtime":1646034107742,"results":"58","hashOfConfig":"35"},{"size":9058,"mtime":1645703143535,"results":"59","hashOfConfig":"35"},{"size":352,"mtime":1644145066040,"results":"60","hashOfConfig":"35"},{"size":7245,"mtime":1644145066045,"results":"61","hashOfConfig":"35"},{"size":2847,"mtime":1644145066039,"results":"62","hashOfConfig":"35"},{"size":2545,"mtime":1644905250829,"results":"63","hashOfConfig":"35"},{"size":3286,"mtime":1644145066038,"results":"64","hashOfConfig":"35"},{"size":731,"mtime":1644145066039,"results":"65","hashOfConfig":"35"},{"size":12832,"mtime":1644145066044,"results":"66","hashOfConfig":"35"},{"size":291,"mtime":1644145066037,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},"dc3u3y",{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"71"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"71"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"71"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"71"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"112","usedDeprecatedRules":"71"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"115","usedDeprecatedRules":"71"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"71"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"71"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"71"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"71"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"71"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"71"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"71"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"71"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\index.js",["150","151"],"/*!\r\n\r\n=========================================================\r\n* Black Dashboard React v1.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/black-dashboard-react\r\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/black-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter, Route, Switch, Redirect, HashRouter } from \"react-router-dom\";\r\n\r\nimport AdminLayout from \"layouts/Admin/Admin.js\";\r\nimport RTLLayout from \"layouts/RTL/RTL.js\";\r\nimport Login from 'pages/login/Login'\r\nimport ForgotPassword from \"pages/forgot-password/ForgotPass\";\r\nimport \"assets/scss/black-dashboard-react.scss\";\r\nimport \"assets/demo/demo.css\";\r\nimport \"assets/css/nucleo-icons.css\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\n\r\nimport ThemeContextWrapper from \"./components/ThemeWrapper/ThemeWrapper\";\r\nimport BackgroundColorWrapper from \"./components/BackgroundColorWrapper/BackgroundColorWrapper\";\r\nimport { Provider } from 'react-redux'\r\nimport store from 'store/store'\r\nimport './index.css'\r\nimport { SnackbarProvider } from \"notistack\";\r\nimport ProtectedRoute from './components/ProtectedRoute/ProtectedRoute'\r\n\r\nReactDOM.render(\r\n  <ThemeContextWrapper>\r\n    <BackgroundColorWrapper>\r\n      <Provider store={store}>\r\n        <SnackbarProvider maxSnack={3} anchorOrigin={{vertical: 'bottom',horizontal: 'right'}}>\r\n          <HashRouter>\r\n            <Switch>\r\n              <ProtectedRoute path=\"/admin\" name=\"Dashboard\" component={AdminLayout} />\r\n              {/* <Route path=\"/admin\" render={(props) => <AdminLayout {...props} />} /> */}\r\n              {/* <Route path=\"/rtl\" render={(props) => <RTLLayout {...props} />} /> */}\r\n              <Route path=\"/login\" render={(props) => <Login {...props} />} />\r\n              <Route path= \"/forgot-password\" render={(props) => <ForgotPassword {...props}/> }/>\r\n              <Redirect from=\"/\" to=\"/admin\" />\r\n            </Switch>\r\n          </HashRouter>\r\n        </SnackbarProvider>\r\n      </Provider>\r\n    </BackgroundColorWrapper>\r\n  </ThemeContextWrapper>,\r\n  document.getElementById(\"root\")\r\n);\r\n",["152","153"],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\ThemeWrapper\\ThemeWrapper.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\BackgroundColorWrapper\\BackgroundColorWrapper.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\ProtectedRoute\\ProtectedRoute.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\layouts\\Admin\\Admin.js",["154","155","156","157","158","159","160","161"],"\r\nimport React from \"react\";\r\nimport { Route, Switch, Redirect, useLocation } from \"react-router-dom\";\r\n// javascript plugin used to create scrollbars on windows\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\n\r\n// core components\r\nimport AdminNavbar from \"components/Navbars/AdminNavbar.js\";\r\nimport Footer from \"components/Footer/Footer.js\";\r\nimport Sidebar from \"components/Sidebar/Sidebar.js\";\r\nimport FixedPlugin from \"components/FixedPlugin/FixedPlugin.js\";\r\n\r\nimport routes from \"routes.js\";\r\n\r\nimport logo from \"assets/img/assetlogo.svg\";\r\nimport { BackgroundColorContext } from \"contexts/BackgroundColorContext\";\r\nimport { is_logged_in } from \"helper\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { USER_ID } from \"config\";\r\nimport { fetchUserDetailsThunk } from \"store/slices/authSlice\";\r\nimport { fetchUsersData } from \"store/slices/userSlice\";\r\nimport { fetchPortableGenerators } from \"store/slices/portableGeneratorSlice\";\r\n\r\nvar ps;\r\n\r\nfunction Admin(props) {\r\n  const location = useLocation();\r\n  const dispatch = useDispatch()\r\n  let history = useHistory()\r\n  const mainPanelRef = React.useRef(null);\r\n  const [sidebarOpened, setsidebarOpened] = React.useState(\r\n    document.documentElement.className.indexOf(\"nav-open\") !== -1\r\n  );\r\n  React.useEffect(() => {\r\n    if (navigator.platform.indexOf(\"Win\") > -1) {\r\n      document.documentElement.className += \" perfect-scrollbar-on\";\r\n      document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n      ps = new PerfectScrollbar(mainPanelRef.current, {\r\n        suppressScrollX: true,\r\n      });\r\n      let tables = document.querySelectorAll(\".table-responsive\");\r\n      for (let i = 0; i < tables.length; i++) {\r\n        ps = new PerfectScrollbar(tables[i]);\r\n      }\r\n    }\r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {\r\n      if (navigator.platform.indexOf(\"Win\") > -1) {\r\n        ps.destroy();\r\n        document.documentElement.classList.add(\"perfect-scrollbar-off\");\r\n        document.documentElement.classList.remove(\"perfect-scrollbar-on\");\r\n      }\r\n    };\r\n  });\r\n  React.useEffect(() => {\r\n    if (navigator.platform.indexOf(\"Win\") > -1) {\r\n      let tables = document.querySelectorAll(\".table-responsive\");\r\n      for (let i = 0; i < tables.length; i++) {\r\n        ps = new PerfectScrollbar(tables[i]);\r\n      }\r\n    }\r\n    document.documentElement.scrollTop = 0;\r\n    document.scrollingElement.scrollTop = 0;\r\n    if (mainPanelRef.current) {\r\n      mainPanelRef.current.scrollTop = 0;\r\n    }\r\n  }, [location]);\r\n  React.useEffect(()=>{\r\n    if(is_logged_in() == false){\r\n      history.push('/login')\r\n    }\r\n    else{\r\n      // dispatch(fetchUserDetailsThunk(sessionStorage.getItem(USER_ID)))\r\n      // dispatch(fetchPondsData({user_id:sessionStorage.getItem(USER_ID)}))\r\n      // dispatch(fetchUsersData())\r\n      dispatch(fetchPortableGenerators('daily'))\r\n    }\r\n  },[])\r\n  // this function opens and closes the sidebar on small devices\r\n  const toggleSidebar = () => {\r\n    document.documentElement.classList.toggle(\"nav-open\");\r\n    setsidebarOpened(!sidebarOpened);\r\n  };\r\n  const getRoutes = (routes) => {\r\n    return routes.map((prop, key) => {\r\n      return (\r\n        <Route\r\n          path={prop.layout + prop.path}\r\n          component={prop.component}\r\n          key={key}\r\n        />\r\n      );\r\n    });\r\n  };\r\n  const getBrandText = (path) => {\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (location.pathname.indexOf(routes[i].layout + routes[i].path) !== -1) {\r\n        return routes[i].name;\r\n      }\r\n    }\r\n    return \"Brand\";\r\n  };\r\n  \r\n  return (\r\n    <BackgroundColorContext.Consumer>\r\n      {({ color, changeColor }) => (\r\n        <React.Fragment>\r\n          <div className=\"wrapper\">\r\n            <Sidebar\r\n              routes={routes}\r\n              logo={{\r\n                outterLink: \"#\",\r\n                text: \"Asset Management\",\r\n                imgSrc: logo,\r\n              }}\r\n              toggleSidebar={toggleSidebar}\r\n            />\r\n            <div className=\"main-panel\" ref={mainPanelRef} data={color}>\r\n              <AdminNavbar\r\n                brandText={getBrandText(location.pathname)}\r\n                toggleSidebar={toggleSidebar}\r\n                sidebarOpened={sidebarOpened}\r\n              />\r\n              \r\n              <Switch>\r\n                {getRoutes(routes)}\r\n                {/* <Redirect from=\"*\" to=\"/admin/dashboard\" /> */}\r\n              </Switch>\r\n              {\r\n                // we don't want the Footer to be rendered on map page\r\n                location.pathname === \"/admin/maps\" ? null : <Footer fluid />\r\n              }\r\n            </div>\r\n          </div>\r\n          {/* <FixedPlugin bgColor={color} handleBgClick={changeColor} /> */}\r\n        </React.Fragment>\r\n      )}\r\n    </BackgroundColorContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default Admin;\r\n","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\layouts\\RTL\\RTL.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\store\\store.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\pages\\forgot-password\\ForgotPass.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\pages\\login\\Login.js",["162","163","164","165","166","167"],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\config.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\store\\slices\\authSlice.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\store\\slices\\portableGeneratorSlice.js",["168","169"],"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { pg_generators } from 'data/data'\r\nimport { JsonClient, USER_ID } from '../../config'\r\n\r\n\r\nconst initialState = {\r\n  data: [],\r\n  status: 'idle',\r\n  error: ''\r\n}\r\n\r\nexport const fetchPortableGenerators = createAsyncThunk('wbs/fetchPortableGenerators', async (type) => {\r\n  const response = await JsonClient.get('devices/data/pg/1?type='+type)\r\n  console.log(\"all devices daily data\", response)\r\n  return response.data\r\n  // return pg_generators\r\n})\r\n\r\nexport const portableGeneratorSlice = createSlice({\r\n  name: 'portable_generators',\r\n  initialState,\r\n  reducers: {\r\n\r\n  },\r\n  extraReducers: {\r\n    [fetchPortableGenerators.pending]: (state, action) => {\r\n      state.status = 'loading'\r\n    },\r\n    [fetchPortableGenerators.fulfilled]: (state, action) => {\r\n      state.status = 'succeeded'\r\n      // Add any fetched posts to the array\r\n      state.data = action.payload\r\n    },\r\n    [fetchPortableGenerators.rejected]: (state, action) => {\r\n      state.status = 'failed'\r\n      state.error = action.error.message\r\n    },\r\n  }\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\n\r\nexport default portableGeneratorSlice.reducer\r\n","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\store\\slices\\userSlice.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\contexts\\ThemeContext.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\contexts\\BackgroundColorContext.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\routes.js",["170"],"import Dashboard from \"views/Dashboard.js\";\r\nimport Users from \"views/Users.js\";\r\n// import Icons from \"views/Icons.js\";\r\n// import Map from \"views/Map.js\";\r\n// import Notifications from \"views/Notifications.js\";\r\n// import Rtl from \"views/Rtl.js\";\r\n// import TableList from \"views/TableList.js\";\r\n// import Typography from \"views/Typography.js\";\r\nimport UserProfile from \"views/UserProfile.js\";\r\n\r\nvar routes = [\r\n  {\r\n    path: \"/dashboard\",\r\n    name: \"Dashboard\",\r\n    icon:\"tim-icons icon-chart-pie-36\",\r\n    component: Dashboard,\r\n    layout: \"/admin\",\r\n  },\r\n  {\r\n    path: \"/profile\",\r\n    name: \"Profile\",\r\n    icon:\"tim-icons icon-single-02\",\r\n    component: UserProfile,\r\n    layout: \"/admin\",\r\n  },\r\n  // {\r\n  //   path: \"/users\",\r\n  //   name: \"Settings\",\r\n  //   icon:\"tim-icons icon-align-center\",\r\n  //   component: Users,\r\n  //   layout: \"/admin\",\r\n  // },\r\n  // {\r\n  //   path: \"/users\",\r\n  //   name: \"Summary\",\r\n  //   icon:\"tim-icons icon-align-center\",\r\n  //   component: Users,\r\n  //   layout: \"/admin\",\r\n  // },\r\n  // {\r\n  //   path: \"/users\",\r\n  //   name: \"cats\",\r\n  //   icon:\"tim-icons icon-align-center\",\r\n  //   component: Users,\r\n  //   layout: \"/admin\",\r\n  // },\r\n  // {\r\n  //   path: \"/icons\",\r\n  //   name: \"Icons\",\r\n  //   rtlName: \"الرموز\",\r\n  //   icon: \"tim-icons icon-atom\",\r\n  //   component: Icons,\r\n  //   layout: \"/admin\",\r\n  // },\r\n  // {\r\n  //   path: \"/map\",\r\n  //   name: \"Map\",\r\n  //   rtlName: \"خرائط\",\r\n  //   icon: \"tim-icons icon-pin\",\r\n  //   component: Map,\r\n  //   layout: \"/admin\",\r\n  // },\r\n  // {\r\n  //   path: \"/notifications\",\r\n  //   name: \"Notifications\",\r\n  //   rtlName: \"إخطارات\",\r\n  //   icon: \"tim-icons icon-bell-55\",\r\n  //   component: Notifications,\r\n  //   layout: \"/admin\",\r\n  // },\r\n  // {\r\n  //   path: \"/user-profile\",\r\n  //   name: \"User Profile\",\r\n  //   rtlName: \"ملف تعريفي للمستخدم\",\r\n  //   icon: \"tim-icons icon-single-02\",\r\n  //   component: UserProfile,\r\n  //   layout: \"/admin\",\r\n  // },\r\n  // {\r\n  //   path: \"/tables\",\r\n  //   name: \"Table List\",\r\n  //   rtlName: \"قائمة الجدول\",\r\n  //   icon: \"tim-icons icon-puzzle-10\",\r\n  //   component: TableList,\r\n  //   layout: \"/admin\",\r\n  // },\r\n  // {\r\n  //   path: \"/typography\",\r\n  //   name: \"Typography\",\r\n  //   rtlName: \"طباعة\",\r\n  //   icon: \"tim-icons icon-align-center\",\r\n  //   component: Typography,\r\n  //   layout: \"/admin\",\r\n  // },\r\n  // {\r\n  //   path: \"/rtl-support\",\r\n  //   name: \"RTL Support\",\r\n  //   rtlName: \"ار تي ال\",\r\n  //   icon: \"tim-icons icon-world\",\r\n  //   component: Rtl,\r\n  //   layout: \"/rtl\",\r\n  // },\r\n];\r\nexport default routes;\r\n","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\Navbars\\RTLNavbar.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\Navbars\\AdminNavbar.js",["171","172","173"],"\r\nimport React from \"react\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\nimport Clock from 'react-live-clock';\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Collapse,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  Input,\r\n  InputGroup,\r\n  NavbarBrand,\r\n  Navbar,\r\n  NavLink,\r\n  Nav,\r\n  Container,\r\n  Modal,\r\n  NavbarToggler,\r\n  ModalHeader,\r\n} from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\"\r\nimport './AdminNavbar.css'\r\nimport { API } from \"config\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction AdminNavbar(props) {\r\n  let history = useHistory()\r\n  const [collapseOpen, setcollapseOpen] = React.useState(false);\r\n  const [modalSearch, setmodalSearch] = React.useState(false);\r\n  const [color, setcolor] = React.useState(\"navbar-transparent\");\r\n  const user = useSelector(state=>state.auth.data)\r\n  React.useEffect(() => {\r\n    window.addEventListener(\"resize\", updateColor);\r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", updateColor);\r\n    };\r\n  });\r\n  // function that adds color white/transparent to the navbar on resize (this is for the collapse)\r\n  const updateColor = () => {\r\n    if (window.innerWidth < 993 && collapseOpen) {\r\n      setcolor(\"bg-white\");\r\n    } else {\r\n      setcolor(\"navbar-transparent\");\r\n    }\r\n  };\r\n  // this function opens and closes the collapse on small devices\r\n  const toggleCollapse = () => {\r\n    if (collapseOpen) {\r\n      setcolor(\"navbar-transparent\");\r\n    } else {\r\n      setcolor(\"bg-white\");\r\n    }\r\n    setcollapseOpen(!collapseOpen);\r\n  };\r\n  const logout=()=>{\r\n    API.get('auth/logout').then((res)=>{\r\n      console.log(res)\r\n      sessionStorage.clear()\r\n      history.push('/login')\r\n    }).catch(err=>{\r\n      sessionStorage.clear()\r\n      history.push('/login')\r\n    })\r\n  }\r\n  // this function is to open the Search modal\r\n  const toggleModalSearch = () => {\r\n    setmodalSearch(!modalSearch);\r\n  };\r\n  return (\r\n    <>\r\n      <Navbar className={classNames(\"navbar-absolute\", color)} expand=\"lg\">\r\n        <Container fluid>\r\n          <div className=\"navbar-wrapper\">\r\n            <div\r\n              className={classNames(\"navbar-toggle d-inline\", {\r\n                toggled: props.sidebarOpened,\r\n              })}\r\n            >\r\n              <NavbarToggler onClick={props.toggleSidebar}>\r\n                <span className=\"navbar-toggler-bar bar1\" />\r\n                <span className=\"navbar-toggler-bar bar2\" />\r\n                <span className=\"navbar-toggler-bar bar3\" />\r\n              </NavbarToggler>\r\n            </div>\r\n            {/* <NavbarBrand href=\"#pablo\" onClick={(e) => e.preventDefault()}>\r\n              {props.brandText}\r\n            </NavbarBrand> */}\r\n          </div>\r\n          <NavbarToggler onClick={toggleCollapse}>\r\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\r\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\r\n            <span className=\"navbar-toggler-bar navbar-kebab\" />\r\n          </NavbarToggler>\r\n          <Collapse navbar isOpen={collapseOpen}>\r\n           \r\n          \r\n        \r\n            <Nav className=\"ml-auto\" navbar>\r\n            <div className=\"show-datetime mr-auto\">\r\n                <span className=\"show-date\"><Clock format={'dddd, MMM Mo, YYYY'}/></span>\r\n                <span className=\"show-time\"><Clock  format={'h:mm:ssa'} ticking={true}/></span>\r\n              </div>\r\n              {/* <InputGroup className=\"search-bar\">\r\n                <Button color=\"link\" onClick={toggleModalSearch}>\r\n                  <i className=\"tim-icons icon-zoom-split\" />\r\n                  <span className=\"d-lg-none d-md-block\">Search</span>\r\n                </Button>\r\n              </InputGroup> */}\r\n              {/* <UncontrolledDropdown nav>\r\n                <DropdownToggle\r\n                  caret\r\n                  color=\"default\"\r\n                  data-toggle=\"dropdown\"\r\n                  nav\r\n                >\r\n                  <div className=\"notification d-none d-lg-block d-xl-block\" />\r\n                  <i className=\"tim-icons icon-sound-wave\" />\r\n                  <p className=\"d-lg-none\">Notifications</p>\r\n                </DropdownToggle>\r\n                <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\r\n                  <NavLink tag=\"li\">\r\n                    <DropdownItem className=\"nav-item\">\r\n                      Mike John responded to your email\r\n                    </DropdownItem>\r\n                  </NavLink>\r\n                  <NavLink tag=\"li\">\r\n                    <DropdownItem className=\"nav-item\">\r\n                      You have 5 more tasks\r\n                    </DropdownItem>\r\n                  </NavLink>\r\n                  <NavLink tag=\"li\">\r\n                    <DropdownItem className=\"nav-item\">\r\n                      Your friend Michael is in town\r\n                    </DropdownItem>\r\n                  </NavLink>\r\n                  <NavLink tag=\"li\">\r\n                    <DropdownItem className=\"nav-item\">\r\n                      Another notification\r\n                    </DropdownItem>\r\n                  </NavLink>\r\n                  <NavLink tag=\"li\">\r\n                    <DropdownItem className=\"nav-item\">\r\n                      Another one\r\n                    </DropdownItem>\r\n                  </NavLink>\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown> */}\r\n          \r\n              <UncontrolledDropdown nav>\r\n             \r\n                <DropdownToggle className=\"mr-4\"\r\n                  caret\r\n                  color=\"default\"\r\n                  nav\r\n                  onClick={(e) => e.preventDefault()}\r\n                >\r\n                  <span className=\"user-name-view\">{user.first_name+' '+user.last_name}</span>\r\n                  <div className=\"photo\">\r\n                    <img\r\n                      alt=\"...\"\r\n                      src={require(\"assets/img/anime3.png\").default}\r\n                    />\r\n                       \r\n                    </div>\r\n                 \r\n                  \r\n                  <b className=\"caret d-none d-lg-block d-xl-block\" />\r\n                  <p className=\"d-lg-none custom-logout\" onClick={logout}>Log out</p>\r\n                </DropdownToggle>\r\n\r\n                <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\r\n                  <NavLink tag=\"li\">\r\n                    <DropdownItem className=\"nav-item\">Profile</DropdownItem>\r\n                  </NavLink>\r\n                  {/* <NavLink tag=\"li\">\r\n                    <DropdownItem className=\"nav-item\">Settings</DropdownItem>\r\n                  </NavLink> */}\r\n                  <DropdownItem divider tag=\"li\" />\r\n                  <NavLink tag=\"li\">\r\n                    <DropdownItem onClick={logout} className=\"nav-item\">Logout</DropdownItem>\r\n                  </NavLink>\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n              \r\n              <NavLink className=\"log-out-nav\" onClick={logout}>Logout</NavLink>\r\n              <li className=\"separator d-lg-none\" />\r\n            </Nav>\r\n          </Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      \r\n      <Modal\r\n        modalClassName=\"modal-search\"\r\n        isOpen={modalSearch}\r\n        toggle={toggleModalSearch}\r\n      >\r\n        <ModalHeader>\r\n          <Input placeholder=\"SEARCH\" type=\"text\" />\r\n          <button\r\n            aria-label=\"Close\"\r\n            className=\"close\"\r\n            onClick={toggleModalSearch}\r\n          >\r\n            <i className=\"tim-icons icon-simple-remove\" />\r\n          </button>\r\n        </ModalHeader>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AdminNavbar;\r\n","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\Footer\\Footer.js",["174"],"import React from \"react\";\r\nimport { Container, Nav, NavItem, NavLink } from \"reactstrap\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <Container fluid>\r\n        <Nav>\r\n          <NavItem>\r\n            <NavLink href=\"https://dma-bd.com\">\r\n              DMA\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink href=\"https://dma-bd.com/about-me/home/\">\r\n              About Us\r\n            </NavLink>\r\n          </NavItem>\r\n          {/* <NavItem>\r\n            <NavLink href=\"https://www.creative-tim.com/blog?ref=bdr-user-archive-footer\">\r\n              Blog\r\n            </NavLink>\r\n          </NavItem> */}\r\n        </Nav>\r\n        <div className=\"copyright\">\r\n          © {new Date().getFullYear()} made with{\" \"}\r\n          <i className=\"tim-icons icon-heart-2\" /> by{\" \"}\r\n          <a\r\n            href=\"https://dma-bd.com\"\r\n            target=\"_blank\"\r\n          >\r\n            DMA\r\n          </a>{\" \"}\r\n          for a better web.\r\n        </div>\r\n      </Container>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\Sidebar\\Sidebar.js",["175","176","177","178","179","180","181"],"import React from \"react\";\r\nimport { NavLink, Link, useLocation } from \"react-router-dom\";\r\n// nodejs library to set properties for components\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n// javascript plugin used to create scrollbars on windows\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\n\r\n// reactstrap components\r\nimport { Nav, NavLink as ReactstrapNavLink } from \"reactstrap\";\r\nimport {\r\n  BackgroundColorContext,\r\n  backgroundColors,\r\n} from \"contexts/BackgroundColorContext\";\r\n\r\nvar ps;\r\n\r\nfunction Sidebar(props) {\r\n  const location = useLocation();\r\n  const sidebarRef = React.useRef(null);\r\n  // verifies if routeName is the one active (in browser input)\r\n  const activeRoute = (routeName) => {\r\n    return location.pathname === routeName ? \"active\" : \"\";\r\n  };\r\n  React.useEffect(() => {\r\n    if (navigator.platform.indexOf(\"Win\") > -1) {\r\n      ps = new PerfectScrollbar(sidebarRef.current, {\r\n        suppressScrollX: true,\r\n        suppressScrollY: false,\r\n      });\r\n    }\r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {\r\n      if (navigator.platform.indexOf(\"Win\") > -1) {\r\n        ps.destroy();\r\n      }\r\n    };\r\n  });\r\n  const linkOnClick = () => {\r\n    document.documentElement.classList.remove(\"nav-open\");\r\n  };\r\n  const { routes, rtlActive, logo } = props;\r\n  let logoImg = null;\r\n  let logoText = null;\r\n  if (logo !== undefined) {\r\n    if (logo.outterLink !== undefined) {\r\n      logoImg = (\r\n        <a\r\n          href={logo.outterLink}\r\n          className=\"simple-text\"\r\n          target=\"_blank\"\r\n          onClick={props.toggleSidebar}\r\n        >\r\n          <div className=\"logo-img\">\r\n            <img src={logo.imgSrc} alt=\"ccda-logo\" />\r\n          </div>\r\n        </a>\r\n      );\r\n      logoText = (\r\n        <a\r\n          href={logo.outterLink}\r\n          className=\"simple-text logo-normal\"\r\n          target=\"_blank\"\r\n          onClick={props.toggleSidebar}\r\n        >\r\n          {logo.text}\r\n        </a>\r\n      );\r\n    } else {\r\n      logoImg = (\r\n        <Link\r\n          to={logo.innerLink}\r\n\r\n          onClick={props.toggleSidebar}\r\n        >\r\n          <div className=\"logo-img\">\r\n            <img src={logo.imgSrc} alt=\"react-logo\" className=\"fish-logo\" />\r\n          </div>\r\n        </Link>\r\n      );\r\n      logoText = (\r\n        <Link\r\n          to={logo.innerLink}\r\n\r\n          onClick={props.toggleSidebar}\r\n        >\r\n          {logo.text}\r\n        </Link>\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar-wrapper\" ref={sidebarRef}>\r\n        {logoImg !== null || logoText !== null ? (\r\n          <div className=\"logo\">\r\n            {logoImg}\r\n            {logoText}\r\n          </div>\r\n        ) : null}\r\n        <Nav>\r\n          {routes.map((prop, key) => {\r\n            if (prop.redirect) return null;\r\n            return (\r\n              <li\r\n                className={\r\n                  activeRoute(prop.layout+prop.path)\r\n                }\r\n                key={key}\r\n              >\r\n                <NavLink\r\n                  to={prop.layout + prop.path}\r\n                  className=\"nav-link\"\r\n                  activeClassName=\"active\"\r\n                  onClick={props.toggleSidebar}\r\n                >\r\n                  <i className={prop.icon} />\r\n                  <p className=\"dashboard-link\">{prop.name}</p>\r\n                </NavLink>\r\n              </li>\r\n            );\r\n          })}\r\n          {/* <li className=\"active-pro\">\r\n                <ReactstrapNavLink href=\"https://www.creative-tim.com/product/black-dashboard-pro-react?ref=bdr-user-archive-sidebar-upgrade-pro\">\r\n                  <i className=\"tim-icons icon-spaceship\" />\r\n                  <p>Upgrade to PRO</p>\r\n                </ReactstrapNavLink>\r\n              </li> */}\r\n        </Nav>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nSidebar.defaultProps = {\r\n  rtlActive: false,\r\n  routes: [{}],\r\n};\r\n\r\nSidebar.propTypes = {\r\n  // if true, then instead of the routes[i].name, routes[i].rtlName will be rendered\r\n  // insde the links of this component\r\n  rtlActive: PropTypes.bool,\r\n  routes: PropTypes.arrayOf(PropTypes.object),\r\n  logo: PropTypes.shape({\r\n    // innerLink is for links that will direct the user within the app\r\n    // it will be rendered as <Link to=\"...\">...</Link> tag\r\n    innerLink: PropTypes.string,\r\n    // outterLink is for links that will direct the user outside the app\r\n    // it will be rendered as simple <a href=\"...\">...</a> tag\r\n    outterLink: PropTypes.string,\r\n    // the text of the logo\r\n    text: PropTypes.node,\r\n    // the image src of the logo\r\n    imgSrc: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default Sidebar;\r\n","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\FixedPlugin\\FixedPlugin.js",["182"],"import React from \"react\";\r\n\r\n// reactstrap components\r\nimport { Button, Dropdown, DropdownToggle, Badge } from \"reactstrap\";\r\nimport { ThemeContext, themes } from \"contexts/ThemeContext\";\r\nimport { backgroundColors } from \"contexts/BackgroundColorContext\";\r\n\r\nfunction FixedPlugin(props) {\r\n  const [dropDownIsOpen, setdropDownIsOpen] = React.useState(false);\r\n  const handleClick = () => {\r\n    setdropDownIsOpen(!dropDownIsOpen);\r\n  };\r\n  return (\r\n    <div className=\"fixed-plugin\">\r\n      <Dropdown isOpen={dropDownIsOpen} toggle={handleClick}>\r\n        <DropdownToggle tag=\"div\">\r\n          <i className=\"fa fa-cog fa-2x\" />\r\n        </DropdownToggle>\r\n        <ul className=\"dropdown-menu show\">\r\n          <li className=\"header-title\">SIDEBAR BACKGROUND</li>\r\n          <li className=\"adjustments-line\">\r\n            <div className=\"badge-colors text-center\">\r\n              <Badge\r\n                color=\"primary\"\r\n                className={\r\n                  props.bgColor === backgroundColors.primary ? \"active\" : \"\"\r\n                }\r\n                onClick={() => {\r\n                  props.handleBgClick(backgroundColors.primary);\r\n                }}\r\n              />{\" \"}\r\n              <Badge\r\n                color=\"info\"\r\n                className={\r\n                  props.bgColor === backgroundColors.blue ? \"active\" : \"\"\r\n                }\r\n                onClick={() => {\r\n                  props.handleBgClick(backgroundColors.blue);\r\n                }}\r\n              />{\" \"}\r\n              <Badge\r\n                color=\"success\"\r\n                className={\r\n                  props.bgColor === backgroundColors.green ? \"active\" : \"\"\r\n                }\r\n                onClick={() => {\r\n                  props.handleBgClick(backgroundColors.green);\r\n                }}\r\n              />{\" \"}\r\n            </div>\r\n          </li>\r\n          <li className=\"adjustments-line text-center color-change\">\r\n            <ThemeContext.Consumer>\r\n              {({ changeTheme }) => (\r\n                <>\r\n                  <span className=\"color-label\">LIGHT MODE</span>{\" \"}\r\n                  <Badge\r\n                    className=\"light-badge mr-2\"\r\n                    onClick={() => changeTheme(themes.light)}\r\n                  />{\" \"}\r\n                  <Badge\r\n                    className=\"dark-badge ml-2\"\r\n                    onClick={() => changeTheme(themes.dark)}\r\n                  />{\" \"}\r\n                  <span className=\"color-label\">DARK MODE</span>{\" \"}\r\n                </>\r\n              )}\r\n            </ThemeContext.Consumer>\r\n          </li>\r\n          {/* <li className=\"button-container\">\r\n            <Button\r\n              href=\"https://www.creative-tim.com/product/black-dashboard-react\"\r\n              color=\"primary\"\r\n              block\r\n              className=\"btn-round\"\r\n            >\r\n              Download Now\r\n            </Button>\r\n            <Button\r\n              color=\"default\"\r\n              block\r\n              className=\"btn-round\"\r\n              outline\r\n              href=\"https://demos.creative-tim.com/black-dashboard-react/#/documentation/tutorial\"\r\n            >\r\n              Documentation\r\n            </Button>\r\n          </li> */}\r\n          {/* <li className=\"header-title\">Want more components?</li>\r\n          <li className=\"button-container\">\r\n            <Button\r\n              href=\"https://www.creative-tim.com/product/black-dashboard-pro-react\"\r\n              className=\"btn-round\"\r\n              disabled\r\n              block\r\n              color=\"danger\"\r\n            >\r\n              Get pro version\r\n            </Button>\r\n          </li> */}\r\n        </ul>\r\n      </Dropdown>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FixedPlugin;\r\n","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\helper.js",["183","184","185","186"],"export const is_logged_in = () => {\r\n    if (sessionStorage.getItem('access-token') != null && sessionStorage.getItem('access-token') != undefined) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\nexport const colors=[\r\n    '#FFFF00','#00FF00'\r\n]\r\nexport const generate_graph_data = (data) => {\r\n    console.log('devices length',data.length)\r\n    let result=[]\r\n    Array.from(data).forEach((item, idx) => {\r\n        let temp_data = {\r\n            ph_temp: (canvas) => {\r\n                let ctx = canvas.getContext(\"2d\");\r\n                let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n                gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\r\n                gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\r\n                gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\");\r\n\r\n                return {\r\n                    labels: item.time,\r\n                    datasets: [\r\n                        {\r\n                            label: \"pH\",\r\n                            fill: true,\r\n                            backgroundColor: gradientStroke,\r\n                            borderColor: \"#B21F1F\",\r\n                            borderWidth: 2,\r\n                            borderDash: [],\r\n                            borderDashOffset: 0.0,\r\n                            pointBackgroundColor: \"#B21F1F\",\r\n                            pointBorderColor: \"rgba(255,255,255,0)\",\r\n                            pointHoverBackgroundColor: \"#B21F1F\",\r\n                            pointBorderWidth: 20,\r\n                            pointHoverRadius: 4,\r\n                            pointHoverBorderWidth: 15,\r\n                            pointRadius: 4,\r\n                            data: item.ph,\r\n                        },\r\n                        {\r\n                            label: \"Temp\",\r\n                            fill: true,\r\n                            backgroundColor: gradientStroke,\r\n                            borderColor: \"#F6C81D\",\r\n                            borderWidth: 2,\r\n                            borderDash: [],\r\n                            borderDashOffset: 0.0,\r\n                            pointBackgroundColor: \"#F6C81D\",\r\n                            pointBorderColor: \"rgba(255,255,255,0)\",\r\n                            pointHoverBackgroundColor: \"#F6C81D\",\r\n                            pointBorderWidth: 20,\r\n                            pointHoverRadius: 4,\r\n                            pointHoverBorderWidth: 15,\r\n                            pointRadius: 4,\r\n                            data: item.temp,\r\n                        },\r\n                        // {\r\n                        //     label: \"TDS\",\r\n                        //     fill: true,\r\n                        //     backgroundColor: gradientStroke,\r\n                        //     borderColor: \"#296330\",\r\n                        //     borderWidth: 2,\r\n                        //     borderDash: [],\r\n                        //     borderDashOffset: 0.0,\r\n                        //     pointBackgroundColor: \"#296330\",\r\n                        //     pointBorderColor: \"rgba(255,255,255,0)\",\r\n                        //     pointHoverBackgroundColor: \"#296330\",\r\n                        //     pointBorderWidth: 20,\r\n                        //     pointHoverRadius: 4,\r\n                        //     pointHoverBorderWidth: 15,\r\n                        //     pointRadius: 4,\r\n                        //     data: item.tds,\r\n                        // },\r\n                    ],\r\n                };\r\n            },\r\n            tds:(canvas) =>{\r\n                let ctx = canvas.getContext(\"2d\");\r\n                let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n                gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\r\n                gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\r\n                gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\");\r\n                return {\r\n                    labels: item.time,\r\n                    datasets: [\r\n                        {\r\n                            label: \"TDS\",\r\n                            fill: true,\r\n                            backgroundColor: gradientStroke,\r\n                            borderColor: \"#F6C81D\",\r\n                            borderWidth: 2,\r\n                            borderDash: [],\r\n                            borderDashOffset: 0.0,\r\n                            pointBackgroundColor: \"#F6C81D\",\r\n                            pointBorderColor: \"rgba(255,255,255,0)\",\r\n                            pointHoverBackgroundColor: \"#F6C81D\",\r\n                            pointBorderWidth: 20,\r\n                            pointHoverRadius: 4,\r\n                            pointHoverBorderWidth: 15,\r\n                            pointRadius: 4,\r\n                            data: item.tds,\r\n                        },\r\n                    ],\r\n                };\r\n            },\r\n            ph_temp_options: {\r\n                maintainAspectRatio: false,\r\n                legend: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    backgroundColor: \"#f5f5f5\",\r\n                    titleFontColor: \"#333\",\r\n                    bodyFontColor: \"#666\",\r\n                    bodySpacing: 4,\r\n                    xPadding: 12,\r\n                    mode: \"nearest\",\r\n                    intersect: 0,\r\n                    position: \"nearest\",\r\n                },\r\n                responsive: true,\r\n                scales: {\r\n                    yAxes: [\r\n                        {\r\n\r\n                            barPercentage: 1.6,\r\n                            gridLines: {\r\n                                drawBorder: false,\r\n                                color: \"rgba(29,140,248,0.0)\",\r\n                                zeroLineColor: \"transparent\",\r\n                            },\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'pH & Temp'\r\n                            },\r\n                            ticks: {\r\n                                suggestedMin: 0,\r\n                                suggestedMax: 100,\r\n                                padding: 20,\r\n                                fontColor: \"#9a9a9a\",\r\n                            },\r\n\r\n                        },\r\n                    ],\r\n                    xAxes: [\r\n                        {\r\n                            barPercentage: 1.6,\r\n                            gridLines: {\r\n                                drawBorder: false,\r\n                                color: \"rgba(29,140,248,0.1)\",\r\n                                zeroLineColor: \"transparent\",\r\n                            },\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'Time'\r\n                            },\r\n                            ticks: {\r\n                                padding: 20,\r\n                                fontColor: \"#9a9a9a\",\r\n                            },\r\n                        },\r\n                    ],\r\n                },\r\n            },\r\n            tds_options: {\r\n                maintainAspectRatio: false,\r\n                legend: {\r\n                    display: false,\r\n                },\r\n                tooltips: {\r\n                    backgroundColor: \"#f5f5f5\",\r\n                    titleFontColor: \"#333\",\r\n                    bodyFontColor: \"#666\",\r\n                    bodySpacing: 4,\r\n                    xPadding: 12,\r\n                    mode: \"nearest\",\r\n                    intersect: 0,\r\n                    position: \"nearest\",\r\n                },\r\n                responsive: true,\r\n                scales: {\r\n                    yAxes: [\r\n                        {\r\n                            barPercentage: 1.6,\r\n                            gridLines: {\r\n                                drawBorder: false,\r\n                                color: \"rgba(29,140,248,0.0)\",\r\n                                zeroLineColor: \"transparent\",\r\n                            },\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'TDS'\r\n                            },\r\n                            ticks: {\r\n                                suggestedMin: 0,\r\n                                suggestedMax: 100,\r\n                                padding: 20,\r\n                                fontColor: \"#9a9a9a\",\r\n                            },\r\n\r\n                        },\r\n                    ],\r\n                    xAxes: [\r\n                        {\r\n                            barPercentage: 1.6,\r\n                            gridLines: {\r\n                                drawBorder: false,\r\n                                color: \"rgba(29,140,248,0.1)\",\r\n                                zeroLineColor: \"transparent\",\r\n                            },\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'Time'\r\n                            },\r\n                            ticks: {\r\n                                padding: 20,\r\n                                fontColor: \"#9a9a9a\",\r\n                            },\r\n                        },\r\n                    ],\r\n                },\r\n            },\r\n        };\r\n        result.push(temp_data)\r\n    })\r\n    console.log(result)\r\n    return result\r\n}\r\n\r\nexport const generate_graph_data_new = (data) => {\r\n    console.log('data',data)\r\n    var ph_labels=[]\r\n    var ph_datasets=[]\r\n    var temp_labels=[]\r\n    var temp_datasets=[]\r\n    var tds_labels=[]\r\n    var tds_datasets=[]\r\n    let result={}\r\n    for (const property in data) {\r\n        // console.log(`${property}: ${data[property]}`);\r\n        if(property == 'PH'){\r\n            ph_labels=data[property][0]?.time\r\n            Array.from(data[property]).forEach((element,idx) => {\r\n                // console.log('okk',property,element.device_name)\r\n                ph_datasets.push({\r\n                    label: element.device_name,\r\n                    fill: true,\r\n                    // backgroundColor: gradientStroke,\r\n                    borderColor: \"#F6C81D\",\r\n                    borderWidth: 2,\r\n                    borderDash: [],\r\n                    borderDashOffset: 0.0,\r\n                    pointBackgroundColor: \"#F6C81D\",\r\n                    pointBorderColor: \"rgba(255,255,255,0)\",\r\n                    pointHoverBackgroundColor: \"#F6C81D\",\r\n                    pointBorderWidth: 20,\r\n                    pointHoverRadius: 4,\r\n                    pointHoverBorderWidth: 15,\r\n                    pointRadius: 4,\r\n                    data: element.ph,\r\n                })\r\n            });\r\n        }\r\n        else if(property=='TEMP'){\r\n            temp_labels=data[property][0]?.time\r\n            Array.from(data[property]).forEach((element,idx) => {\r\n                console.log('okk',property,element.device_name)\r\n                temp_datasets.push({\r\n                    label: element.device_name,\r\n                    fill: true,\r\n                    // backgroundColor: gradientStroke,\r\n                    borderColor: \"#F6C81D\",\r\n                    borderWidth: 2,\r\n                    borderDash: [],\r\n                    borderDashOffset: 0.0,\r\n                    pointBackgroundColor: \"#F6C81D\",\r\n                    pointBorderColor: \"rgba(255,255,255,0)\",\r\n                    pointHoverBackgroundColor: \"#F6C81D\",\r\n                    pointBorderWidth: 20,\r\n                    pointHoverRadius: 4,\r\n                    pointHoverBorderWidth: 15,\r\n                    pointRadius: 4,\r\n                    data: element.temp,\r\n                })\r\n            });\r\n        }\r\n        else if(property=='TDS'){\r\n            tds_labels=data[property][0]?.time\r\n            Array.from(data[property]).forEach((element,idx) => {\r\n                tds_datasets.push({\r\n                    label: element.device_name,\r\n                    fill: true,\r\n                    // backgroundColor: gradientStroke,\r\n                    borderColor: \"#F6C81D\",\r\n                    borderWidth: 2,\r\n                    borderDash: [],\r\n                    borderDashOffset: 0.0,\r\n                    pointBackgroundColor: \"#F6C81D\",\r\n                    pointBorderColor: \"rgba(255,255,255,0)\",\r\n                    pointHoverBackgroundColor: \"#F6C81D\",\r\n                    pointBorderWidth: 20,\r\n                    pointHoverRadius: 4,\r\n                    pointHoverBorderWidth: 15,\r\n                    pointRadius: 4,\r\n                    data: element.tds,\r\n                })\r\n            });\r\n        }\r\n    }\r\n    let temp_data = {\r\n        ph: (canvas) => {\r\n            let ctx = canvas.getContext(\"2d\");\r\n            let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n            gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\r\n            gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\r\n            gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\");\r\n\r\n            return {\r\n                labels: ph_labels,\r\n                datasets: ph_datasets,\r\n            };\r\n        },\r\n        temp: (canvas) => {\r\n            let ctx = canvas.getContext(\"2d\");\r\n            let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n            gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\r\n            gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\r\n            gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\");\r\n\r\n            return {\r\n                labels: temp_labels,\r\n                datasets: temp_datasets,\r\n            };\r\n        },\r\n        tds:(canvas) =>{\r\n            let ctx = canvas.getContext(\"2d\");\r\n            let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n            gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\r\n            gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\r\n            gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\");\r\n            return {\r\n                labels: tds_labels,\r\n                datasets: tds_datasets,\r\n            };\r\n        },\r\n        ph_options: {\r\n            maintainAspectRatio: false,\r\n            legend: {\r\n                display: false,\r\n            },\r\n            tooltips: {\r\n                backgroundColor: \"#f5f5f5\",\r\n                titleFontColor: \"#333\",\r\n                bodyFontColor: \"#666\",\r\n                bodySpacing: 4,\r\n                xPadding: 12,\r\n                mode: \"nearest\",\r\n                intersect: 0,\r\n                position: \"nearest\",\r\n            },\r\n            responsive: true,\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        barPercentage: 1.6,\r\n                        gridLines: {\r\n                            drawBorder: false,\r\n                            color: \"rgba(29,140,248,0.0)\",\r\n                            zeroLineColor: \"transparent\",\r\n                        },\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'pH'\r\n                        },\r\n                        ticks: {\r\n                            suggestedMin: 0,\r\n                            suggestedMax: 100,\r\n                            padding: 20,\r\n                            fontColor: \"#9a9a9a\",\r\n                        },\r\n\r\n                    },\r\n                ],\r\n                xAxes: [\r\n                    {\r\n                        barPercentage: 1.6,\r\n                        gridLines: {\r\n                            drawBorder: false,\r\n                            color: \"rgba(29,140,248,0.1)\",\r\n                            zeroLineColor: \"transparent\",\r\n                        },\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Time'\r\n                        },\r\n                        ticks: {\r\n                            padding: 20,\r\n                            fontColor: \"#9a9a9a\",\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        },\r\n        temp_options: {\r\n            maintainAspectRatio: false,\r\n            legend: {\r\n                display: false,\r\n            },\r\n            tooltips: {\r\n                backgroundColor: \"#f5f5f5\",\r\n                titleFontColor: \"#333\",\r\n                bodyFontColor: \"#666\",\r\n                bodySpacing: 4,\r\n                xPadding: 12,\r\n                mode: \"nearest\",\r\n                intersect: 0,\r\n                position: \"nearest\",\r\n            },\r\n            responsive: true,\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        barPercentage: 1.6,\r\n                        gridLines: {\r\n                            drawBorder: false,\r\n                            color: \"rgba(29,140,248,0.0)\",\r\n                            zeroLineColor: \"transparent\",\r\n                        },\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Temp'\r\n                        },\r\n                        ticks: {\r\n                            suggestedMin: 0,\r\n                            suggestedMax: 100,\r\n                            padding: 20,\r\n                            fontColor: \"#9a9a9a\",\r\n                        },\r\n\r\n                    },\r\n                ],\r\n                xAxes: [\r\n                    {\r\n                        barPercentage: 1.6,\r\n                        gridLines: {\r\n                            drawBorder: false,\r\n                            color: \"rgba(29,140,248,0.1)\",\r\n                            zeroLineColor: \"transparent\",\r\n                        },\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Time'\r\n                        },\r\n                        ticks: {\r\n                            padding: 20,\r\n                            fontColor: \"#9a9a9a\",\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        },\r\n        tds_options: {\r\n            maintainAspectRatio: false,\r\n            legend: {\r\n                display: false,\r\n            },\r\n            tooltips: {\r\n                backgroundColor: \"#f5f5f5\",\r\n                titleFontColor: \"#333\",\r\n                bodyFontColor: \"#666\",\r\n                bodySpacing: 4,\r\n                xPadding: 12,\r\n                mode: \"nearest\",\r\n                intersect: 0,\r\n                position: \"nearest\",\r\n            },\r\n            responsive: true,\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        barPercentage: 1.6,\r\n                        gridLines: {\r\n                            drawBorder: false,\r\n                            color: \"rgba(29,140,248,0.0)\",\r\n                            zeroLineColor: \"transparent\",\r\n                        },\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'TDS'\r\n                        },\r\n                        ticks: {\r\n                            suggestedMin: 0,\r\n                            suggestedMax: 100,\r\n                            padding: 20,\r\n                            fontColor: \"#9a9a9a\",\r\n                        },\r\n\r\n                    },\r\n                ],\r\n                xAxes: [\r\n                    {\r\n                        barPercentage: 1.6,\r\n                        gridLines: {\r\n                            drawBorder: false,\r\n                            color: \"rgba(29,140,248,0.1)\",\r\n                            zeroLineColor: \"transparent\",\r\n                        },\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Time'\r\n                        },\r\n                        ticks: {\r\n                            padding: 20,\r\n                            fontColor: \"#9a9a9a\",\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        },  \r\n    };\r\n    result=temp_data\r\n    console.log(result)\r\n    return result\r\n}","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\views\\Users.js",["187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport UpArrow from \"../assets/icons/up-arrow.svg\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\n// react plugin used to create charts\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport SearchField from 'react-search-field';\r\nimport SafePondDot from '../assets/icons/safe-pond.svg'\r\nimport PaperIcon from '../assets/icons/Paper.svg'\r\nimport RefreshIcon from '../assets/icons/refresh.svg'\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Nav,\r\n  NavLink,\r\n  ButtonToolbar,\r\n  Table,\r\n  ButtonToggle,\r\n  Row,\r\n  TabContent,\r\n  TabPane,\r\n  Col,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n\r\n} from \"reactstrap\";\r\n\r\n// core components\r\nimport {\r\n  chartExample1,\r\n  chartExample2,\r\n\r\n  chartExample4,\r\n} from \"variables/charts.js\";\r\n// import \"../../src/assets/css/Users.css\";\r\nimport '../index.css'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport OwlCarousel from 'react-owl-carousel';\r\nimport 'owl.carousel/dist/assets/owl.carousel.css';\r\nimport 'owl.carousel/dist/assets/owl.theme.default.css';\r\nimport { API } from \"config\";\r\nimport { generate_graph_data } from \"helper\";\r\nimport { useLocation } from 'react-router';\r\nimport { useSnackbar } from 'notistack';\r\nimport store from \"store/store\";\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport { fetchUsersData } from \"store/slices/userSlice\";\r\nimport Mailto from \"components/MailTo/MailTo\";\r\n\r\nfunction Users(props) {\r\n  const animatedComponents = makeAnimated();\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar()\r\n  let location = useLocation()\r\n  const dispatch = useDispatch()\r\n  const [showAssetUpdateModal,setShowAssetUpdateModal] = useState(false)\r\n  const closeForm=()=>{\r\n      setShowAssetUpdateModal(false)\r\n      setSelectedUser(null)\r\n  }\r\n  const users = useSelector(state => state.users.data)\r\n  \r\n  // const device_data_ref = React.forwardRef(null)\r\n  {/**Code for writing table search */ }\r\n  function onChange(value, event) {\r\n    console.log(value,event)\r\n  }\r\n  const [selected_user,setSelectedUser]=useState()\r\n  \r\n  useEffect(()=>{\r\n    // console.log(device_data_ref.current)\r\n    console.log('users mounted')\r\n  },[])\r\n  const [message,setMessage]=useState()\r\n  const [assets,setAssets]=useState()\r\n  const [selectedAssets,setSelectedAssets]=useState('')\r\n  const get_free_assets=()=>{\r\n    API.get('assets/list/').then((res)=>{\r\n      console.log('all assets',res.data)\r\n      let temp=[]\r\n      res.data.data.forEach((asset,idx)=>{\r\n        temp.push({value:asset.id,label:asset.ast_name,data:asset})\r\n      })\r\n      setAssets(temp)\r\n    }).catch(err=>{\r\n      console.log(err.response.data)\r\n    })\r\n  }\r\n  \r\n  const handleAssetsChange=(options,actionMeta)=>{\r\n    let temp ='';\r\n    options.forEach((option,idx)=>{\r\n      if(idx < options.length-1){\r\n        temp+=option.value+','\r\n      }\r\n      else{\r\n        temp+=option.value\r\n      }\r\n    })\r\n    setSelectedAssets(temp)\r\n  }\r\n  const assign_asset_to_user=()=>{\r\n    API.post('assets/assign/to/user/',{user_id:selected_user.id,asset_ids:selectedAssets}).then((res)=>{\r\n      setSelectedAssets('')\r\n      closeForm()\r\n      get_free_assets()\r\n      dispatch(fetchUsersData())\r\n      enqueueSnackbar('Assets assigned to user',{variant:'success'})\r\n    })\r\n  }\r\n  const swap_user_verification_status=(user_id)=>{\r\n    API.post('auth/user/active/inactive/',{user_id:user_id}).then(res=>{\r\n      console.log(res.data)\r\n      dispatch(fetchUsersData())\r\n      enqueueSnackbar('User activation status updated',{variant:'success'})\r\n    }).catch(err=>{\r\n      enqueueSnackbar('Something went wrong, Please try again later',{variant:'warning'})\r\n    })\r\n  }\r\n  React.useEffect(()=>{\r\n    get_free_assets()\r\n  },[])\r\n  return (\r\n    <>\r\n    <Modal\r\n        isOpen={showAssetUpdateModal}\r\n        size='md'\r\n        className=\"p-2\"\r\n      >\r\n        <ModalHeader className=\"custom-modal-header\">\r\n          <span style={{color:'white'}}>Assign ponds to {selected_user?.first_name}</span>\r\n        </ModalHeader>\r\n        <ModalBody className=\"custom-modal-design\" >\r\n          <Form>\r\n            {/* <FormGroup>\r\n              <Input value={message} onChange={(e)=>setMessage(e.target.value)} type=\"textarea\" className=\"modal-custom-input\" placeholder=\"Type here...\" />\r\n            </FormGroup> */}\r\n            <FormGroup>\r\n              <Select onChange={handleAssetsChange} components={animatedComponents} closeMenuOnSelect={false} isMulti options={assets}/>\r\n            </FormGroup>\r\n          </Form>\r\n          <div className=\"moadl-button-holder\">\r\n            <Button type=\"button\" onClick={assign_asset_to_user} className=\"okay-button-modal\">\r\n              Save\r\n            </Button>\r\n            <Button className=\"cancel-button-modal ml-2\"\r\n              onClick={() => closeForm()}\r\n            >\r\n              cancel\r\n            </Button>\r\n          </div>\r\n        </ModalBody>\r\n        {/* <ModalFooter className=\"p-2\">\r\n          \r\n        </ModalFooter> */}\r\n      </Modal>\r\n\r\n      {/**modal ends */}\r\n      <div className=\"content\">\r\n        <Row>\r\n          {/*______CARD FOR VIEWING DATA IN TABLE______ */}\r\n          <Col lg=\"12\" md=\"12\">\r\n            <Card className=\"table-holder-class\">\r\n\r\n              <CardHeader>\r\n                {/* <CardTitle tag=\"h4\">Simple Table</CardTitle> */}\r\n              </CardHeader>\r\n              <CardBody>\r\n                {/**SERACH FIELD */}\r\n                <SearchField\r\n                  className=\"table-search\"\r\n                  placeholder='Search by'\r\n                  onChange={onChange}\r\n                />\r\n                <Table className=\"tablesorter pond-details\" responsive hover>\r\n                  <thead className=\"text-primary\">\r\n                    <tr>\r\n                      <th className=\"pond-value-pointer\">User ID</th>\r\n                      <th className=\"pond-value-pointer\">Name</th>\r\n                      <th className=\"pond-value-pointer\">Email</th>\r\n                      <th className=\"pond-value-pointer\">Phone</th>\r\n                      <th className=\"pond-value-pointer\">Status</th>\r\n                      {/* <th className=\"text-center pond-value-pointer\">Action</th> */}\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {users.length>0 && Array.from(users).map((user, idx) => (\r\n                      <tr key={idx}>\r\n                        <td className=\"pond-actual-value\">{idx+1}</td>\r\n                        <td className=\"pond-actual-value\">{user.first_name+' '+user.last_name}</td>\r\n                        <td className=\"pond-actual-value\"><Mailto email={user.usr_email}/></td>\r\n                        <td className=\"pond-actual-value\">{user.user_phone!=null?user.user_phone.phn_cell:''}</td>\r\n                        <td className={`pond-actual-value ${user.is_active ? \"status-text-active\" : \"status-text-inactive\"}`}>{user.is_active?'Active':'Inactive'}</td>\r\n                        {/* <td className=\"text-center pond-actual-value\">{user.ph}</td>\r\n                        <td className=\"text-center pond-actual-value\">{user.temp} ℃</td>\r\n                        <td className=\"text-center pond-actual-value\">{user.tds} mg/L</td>\r\n                        <td className=\"text-center pond-actual-value\">comment</td> */}\r\n                        {/* <th className=\"text-center pond-actual-value ml-auto\">\r\n                        <ButtonToolbar aria-label=\"Toolbar with button groups\">\r\n                          <ButtonGroup aria-label=\"Third group\" className=\"m-auto\" size=\"sm\">\r\n                            <Button onClick={()=>{setSelectedUser(user);setShowAssetUpdateModal(true)}}>Manage Ponds</Button>\r\n                          </ButtonGroup>\r\n                        </ButtonToolbar>\r\n                        </th> */}\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </Table>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Users;\r\n","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\views\\Dashboard.js",["217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264"],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\views\\UserProfile.js",["265"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardFooter,\r\n  CardText,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\n\r\nfunction UserProfile() {\r\n\r\n  // const [username,setUserName]=useState('')\r\n  // const [email,setEmail]=useState('')\r\n  // const [firstname,setFirstName]=useState('')\r\n  // const [lastname, setLastName]=useState('')\r\n  // const [city,setCity]=useState('')\r\n  // const [postalcode,setPostalCode]=useState('')\r\n  // const [address,setAddress]=useState('')\r\n  // const [usercountry,setCountry]=useState('')\r\n  // const [aboutme,setAboutMe]=useState('')\r\n  \r\n  const [user,setUser]= useState({username: \"\",\r\n                                  email:\"\",\r\n                                  firstName:\"\",\r\n                                  lastName:\"\",\r\n                                  country:\"\",\r\n                                  city:\"\",\r\n                                  address: \"\",\r\n                                  postalcode:\"\",\r\n                                  \r\n  })\r\n  const setUserProfile = (e) => {\r\n    setUser({...user, [e.target.name]: e.target.value});\r\n  }\r\n\r\n  function print(){\r\n\r\n  }\r\n  \r\n function onSave(){\r\n  \r\n  console.log('user',user)\r\n\r\n }\r\n const submit_form=()=>[\r\n  alert('u clicked submit')\r\n ]\r\n\r\n  return (\r\n    <>\r\n      <div className=\"content\">\r\n        <Row>\r\n          <Col md=\"8\">\r\n            <Card>\r\n              <CardHeader>\r\n                <h5 className=\"title\">Edit Profile</h5>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <Form onSubmit={submit_form}>\r\n                  <Row>\r\n                    <Col className=\"pr-md-1\" md=\"5\">\r\n                      <FormGroup>\r\n                        <label>Company (disabled)</label>\r\n                        <Input\r\n                          defaultValue=\"Creative Code Inc.\"\r\n                          disabled\r\n                          placeholder=\"Company\"\r\n                          type=\"text\"\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col className=\"px-md-1\" md=\"3\">\r\n                      <FormGroup>\r\n                        <label>Username</label>\r\n                        <Input\r\n                          name=\"username\"\r\n                          placeholder=\"Username\"\r\n                          type=\"text\"\r\n                          value={user.username}\r\n                          onChange={setUserProfile}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col className=\"pl-md-1\" md=\"4\">\r\n                      <FormGroup>\r\n                        <label htmlFor=\"exampleInputEmail1\">\r\n                          Email address\r\n                        </label>\r\n                        <Input \r\n                        name=\"email\"\r\n                        placeholder=\"mike@email.com\" \r\n                        type=\"email\" \r\n                        value={user.email}\r\n                        onChange={setUserProfile}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className=\"pr-md-1\" md=\"6\">\r\n                      <FormGroup>\r\n                        <label>First Name</label>\r\n                        <Input\r\n                          name=\"firstName\"\r\n                          placeholder=\"Company\"\r\n                          type=\"text\"\r\n                          value={user.firstName}\r\n                          onChange={setUserProfile}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col className=\"pl-md-1\" md=\"6\">\r\n                      <FormGroup>\r\n                        <label>Last Name</label>\r\n                        <Input\r\n                          name=\"lastName\"\r\n                          placeholder=\"Last Name\"\r\n                          type=\"text\"\r\n                          value={user.lastName}\r\n                          onChange={setUserProfile}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"12\">\r\n                      <FormGroup>\r\n                        <label>Address</label>\r\n                        <Input\r\n                          name= \"address\"\r\n                          placeholder=\"Home Address\"\r\n                          type=\"text\"\r\n                          value={user.address}\r\n                          onChange={setUserProfile}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col className=\"pr-md-1\" md=\"4\">\r\n                      <FormGroup>\r\n                        <label>City</label>\r\n                        <Input\r\n                          name= \"city\"\r\n                          placeholder=\"City\"\r\n                          type=\"text\"\r\n                          value={user.city}\r\n                          onChange={setUserProfile}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col className=\"px-md-1\" md=\"4\">\r\n                      <FormGroup>\r\n                        <label>Country</label>\r\n                        <Input\r\n                          name= \"country\"\r\n                          placeholder=\"Country\"\r\n                          type=\"text\"\r\n                          value={user.country}\r\n                          onChange={setUserProfile}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                    <Col className=\"pl-md-1\" md=\"4\">\r\n                      <FormGroup>\r\n                        <label>Postal Code</label>\r\n                        <Input \r\n                        name=\"postalcode\"\r\n                        placeholder=\"ZIP Code\"\r\n                         type=\"number\" \r\n                         value={user.postalcode}\r\n                         onChange={setUserProfile}\r\n                         />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"8\">\r\n                      <FormGroup>\r\n                        <label>About Me</label>\r\n                        <Input\r\n                          cols=\"80\"\r\n                          \r\n                          placeholder=\"Here can be your description\"\r\n                          rows=\"4\"\r\n                          type=\"textarea\"\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                </Form>\r\n              </CardBody>\r\n              <CardFooter>\r\n                <Button onClick={onSave} className=\"btn-fill\" color=\"primary\" type=\"button\">\r\n                  Save\r\n                </Button>\r\n              </CardFooter>\r\n            </Card>\r\n          </Col>\r\n          <Col md=\"4\">\r\n            <Card className=\"card-user\">\r\n              <CardBody>\r\n                <CardText />\r\n                <div className=\"author\">\r\n                  <div className=\"block block-one\" />\r\n                  <div className=\"block block-two\" />\r\n                  <div className=\"block block-three\" />\r\n                  <div className=\"block block-four\" />\r\n                  <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\r\n                    <img\r\n                      alt=\"...\"\r\n                      className=\"avatar\"\r\n                      src={require(\"assets/img/emilyz.jpg\").default}\r\n                    />\r\n                    <h5 className=\"title\">Mike Andrew</h5>\r\n                  </a>\r\n                  <p className=\"description\">Ceo/Co-Founder</p>\r\n                </div>\r\n                <div className=\"card-description\">\r\n                  Do not be scared of the truth because we need to restart the\r\n                  human foundation in truth And I love you like Kanye loves\r\n                  Kanye I love Rick Owens’ bed design but the back is...\r\n                </div>\r\n              </CardBody>\r\n              <CardFooter>\r\n                <div className=\"button-container\">\r\n                  <Button className=\"btn-icon btn-round\" color=\"facebook\">\r\n                    <i className=\"fab fa-facebook\" />\r\n                  </Button>\r\n                  <Button className=\"btn-icon btn-round\" color=\"twitter\">\r\n                    <i className=\"fab fa-twitter\" />\r\n                  </Button>\r\n                  <Button className=\"btn-icon btn-round\" color=\"google\">\r\n                    <i className=\"fab fa-google-plus\" />\r\n                  </Button>\r\n                </div>\r\n              </CardFooter>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserProfile;\r\n","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\data\\data.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\views\\Map.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\google-map\\GoogleMap.js",["266","267","268","269","270","271"],"import { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\r\nimport React, { Component, useState } from 'react'\r\n// import {API} from '../../Config'\r\nconst MapContainer = (props) => {\r\n    const [markers,setMarkers]=useState([])\r\n    const onMarkerClick = () => {\r\n\r\n    }\r\n    const onInfoWindowClose = () => {\r\n\r\n    }\r\n    React.useEffect(()=>{\r\n        // API.get('agentlocation').then((res)=>{\r\n        //     console.log(res.data)\r\n        //     setMarkers(res.data.data)\r\n        // })\r\n    },[])\r\n    return (\r\n        <>\r\n            <div style={{overflowY:'hidden'}}>\r\n                <Map google={props.google} zoom={14} initialCenter={{\r\n                    lat: 23.8103,\r\n                    lng: 90.4124\r\n                }}>\r\n                <Marker\r\n                    title={'The marker`s title will appear as a tooltip.'}\r\n                    name={'SOMA'}\r\n                    position={{lat: 23.8103, lng: 90.4124}} />\r\n                    <Marker\r\n                    title={'The marker`s title will appear as a tooltip.'}\r\n                    name={'SOMA'}\r\n                    position={{lat: 23.8103, lng: 90.4122}} />\r\n                    <Marker\r\n                    title={'The marker`s title will appear as a tooltip.'}\r\n                    name={'SOMA'}\r\n                    position={{lat: 23.8103, lng: 90.4121}} />\r\n                </Map>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: ('AIzaSyAChn6tArJ-qTOKRZ1xhK0P9cumPrOjVfQ')\r\n})(MapContainer)\r\n\r\n\r\n\r\n// class GoogleMapAgentTrack extends Component {\r\n//     state = {\r\n//         showingInfoWindow: false,\r\n//         activeMarker: {},\r\n//         selectedPlace: {},\r\n//     };\r\n\r\n//     onMarkerClick = (props, marker, e) =>\r\n//         this.setState({\r\n//             selectedPlace: props,\r\n//             activeMarker: marker,\r\n//             showingInfoWindow: true\r\n//         });\r\n\r\n//     onMapClicked = (props) => {\r\n//         if (this.state.showingInfoWindow) {\r\n//             this.setState({\r\n//                 showingInfoWindow: false,\r\n//                 activeMarker: null\r\n//             })\r\n//         }\r\n//     };\r\n\r\n//     render() {\r\n//         return (\r\n//             <Map google={this.props.google}\r\n//                 onClick={this.onMapClicked}>\r\n//                 <Marker onClick={this.onMarkerClick}\r\n//                     name={'Current location'} />\r\n\r\n//                 <InfoWindow\r\n//                     marker={this.state.activeMarker}\r\n//                     visible={this.state.showingInfoWindow}>\r\n//                     <div>\r\n//                         <h1>{this.state.selectedPlace.name}</h1>\r\n//                     </div>\r\n//                 </InfoWindow>\r\n//             </Map>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// export default GoogleMapAgentTrack","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\google-map\\Tracking.js",["272","273"],"// import React from 'react'\r\n// import { Wrapper, Status } from \"@googlemaps/react-wrapper\";\r\n\r\n// const render = (status) => {\r\n//     return <h1>{status}</h1>;\r\n// };\r\n\r\n// const AgentTrack=()=>{\r\n//     const ref = React.useRef(null);\r\n//     const [map, setMap] = React.useState()\r\n//     React.useEffect(() => {\r\n//         if (ref.current && !map) {\r\n//           setMap(new window.google.maps.Map(ref.current, {}));\r\n//         }\r\n//       }, [ref, map]);\r\n//     return(\r\n//         <>\r\n//         <Wrapper apiKey={\"AIzaSyC1s-1C2LQnTymDlkwORWdstgc36B7B_eU\"} render={render}>\r\n//             {/* <YourComponent/> */}\r\n\r\n//         </Wrapper>\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default AgentTrack\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport GoogleMapReact from 'google-map-react';\r\nimport Marker from './Marker'\r\nimport { API } from \"../../config\";\r\n\r\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\r\n\r\nexport default function SimpleMap() {\r\n  const [user_position, setUserPosition] = useState()\r\n  const [devices,setDevices]=useState([])\r\n  const defaultProps = {\r\n    center: {\r\n      lat: 23.9152383333333,\r\n      lng: 90.25197\r\n    },\r\n    zoom: 8\r\n  };\r\n  const handleApiLoaded = (map, maps) => {\r\n    // use map and maps objects\r\n  };\r\n  React.useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n      console.log(\"Latitude is :\", position.coords.latitude);\r\n      console.log(\"Longitude is :\", position.coords.longitude);\r\n      setUserPosition(position.coords)\r\n    });\r\n    API.get('devices/list/with/data/').then((res)=>{\r\n      console.log('devices',res.data)\r\n      setDevices(res.data)\r\n    })\r\n  }, [])\r\n  \r\n  return (\r\n    // Important! Always set the container height explicitly\r\n    <div style={{ height: '100vh', width: '100%' }}>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: \"AIzaSyAChn6tArJ-qTOKRZ1xhK0P9cumPrOjVfQ\" }}\r\n        defaultCenter={defaultProps.center}\r\n        defaultZoom={defaultProps.zoom}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        onGoogleApiLoaded={({ map, maps }) => handleApiLoaded(map, maps)}\r\n      >\r\n        {devices.length>0 && devices.map((item,idx)=>(\r\n          <Marker\r\n            key={idx}\r\n            text={item.name}\r\n            lat={23.9152383333333}\r\n            lng={90.25197}\r\n          />\r\n        ))}\r\n        \r\n        {/* <Marker\r\n            text={\"My Marker\"}\r\n            lat={10.99835602}\r\n            lng={77.01502627}\r\n          /> */}\r\n      </GoogleMapReact>\r\n    </div>\r\n  );\r\n}","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\OwnerUpdateModal\\OwnerUpdateModal.js",["274","275"],"import React,{useState} from 'react'\r\nimport { API } from 'config'\r\nimport { useDispatch,useSelector } from 'react-redux'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalBody,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n  } from \"reactstrap\";\r\nimport { useSnackbar } from 'notistack';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport { fetchPortableGenerators } from 'store/slices/portableGeneratorSlice';\r\nimport { USER_ID } from 'config';\r\n\r\nconst OwnerUpdateModal = (props) => {\r\n    const animatedComponents = makeAnimated();\r\n    const dispatch = useDispatch()\r\n    const [person,setSelectedPerson]=useState()\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar()\r\n    const users = useSelector(state => {\r\n        let temp=[]\r\n        Array.from(state.users.data).forEach((user,idx)=>{\r\n            temp.push({label:user.first_name+' '+user.last_name,value:user.id,data:user})\r\n        })\r\n        return temp\r\n    })\r\n    function closeForm(){\r\n        props.close()\r\n    }\r\n    \r\n    const handlePersonChange=(options,actionMeta)=>{\r\n        setSelectedPerson(options.data)\r\n    }\r\n    const assign_user_to_pond = () => {\r\n        console.log({user_id:person.id,asset_ids:String(props.pond.id)})\r\n        API.post('assets/assign/to/user/',{user_id:person.id,asset_ids:String(props.pond.id)}).then((res) => {\r\n            console.log(res)\r\n            closeForm()\r\n            dispatch(fetchPortableGenerators({user_id:sessionStorage.getItem(USER_ID)}))\r\n            enqueueSnackbar('Person assigned to pond', { variant: 'success' })\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={props.show}\r\n                size='md'\r\n                className=\"p-2\"\r\n            >\r\n                <ModalHeader className=\"custom-modal-header\">\r\n                    <span style={{ color: 'white' }}>Assign Person to {props.pond?.name}</span>\r\n                </ModalHeader>\r\n                <ModalBody className=\"custom-modal-design\" >\r\n                    <Form>\r\n                        {/* <FormGroup>\r\n                            <Input value={message} onChange={(e)=>setMessage(e.target.value)} type=\"textarea\" className=\"modal-custom-input\" placeholder=\"Type here...\" />\r\n                        </FormGroup> */}\r\n                        <FormGroup>\r\n                            <Select onChange={handlePersonChange} components={animatedComponents} closeMenuOnSelect={true} isMulti={false} options={users} />\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <div className=\"moadl-button-holder\">\r\n                        <Button type=\"button\" onClick={assign_user_to_pond} className=\"okay-button-modal\">\r\n                            Save\r\n                        </Button>\r\n                        <Button className=\"cancel-button-modal ml-2\"\r\n                            onClick={() => closeForm()}\r\n                        >\r\n                            cancel\r\n                        </Button>\r\n                    </div>\r\n                </ModalBody>\r\n                {/* <ModalFooter className=\"p-2\">\r\n          \r\n                </ModalFooter> */}\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OwnerUpdateModal","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\google-map\\Marker.js",[],"C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\variables\\charts.js",["276"],"/*!\r\n\r\n=========================================================\r\n* Black Dashboard React v1.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/black-dashboard-react\r\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/black-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\n// ##############################\r\n// // // Chart variables\r\n// #############################\r\n\r\n// chartExample1 and chartExample2 options\r\nlet chart1_2_options = {\r\n  maintainAspectRatio: false,\r\n  legend: {\r\n    display: false,\r\n  },\r\n  tooltips: {\r\n    backgroundColor: \"#f5f5f5\",\r\n    titleFontColor: \"#333\",\r\n    bodyFontColor: \"#666\",\r\n    bodySpacing: 4,\r\n    xPadding: 12,\r\n    mode: \"nearest\",\r\n    intersect: 0,\r\n    position: \"nearest\",\r\n  },\r\n  responsive: true,\r\n  scales: {\r\n    yAxes: [\r\n      {\r\n        \r\n        barPercentage: 1.6,\r\n        gridLines: {\r\n          drawBorder: false,\r\n          color: \"rgba(29,140,248,0.0)\",\r\n          zeroLineColor: \"transparent\",\r\n        },\r\n        scaleLabel: {\r\n          display: true,\r\n          labelString: 'pH & Temp. (C)'\r\n        },\r\n        ticks: {\r\n          suggestedMin: 60,\r\n          suggestedMax: 125,\r\n          padding: 20,\r\n          fontColor: \"#9a9a9a\",\r\n        },\r\n     \r\n      },\r\n    ],\r\n    xAxes: [\r\n      {\r\n        barPercentage: 1.6,\r\n        gridLines: {\r\n          drawBorder: false,\r\n          color: \"rgba(29,140,248,0.1)\",\r\n          zeroLineColor: \"transparent\",\r\n        },\r\n        scaleLabel: {\r\n          display: true,\r\n          labelString: 'Time'\r\n        },\r\n        ticks: {\r\n          padding: 20,\r\n          fontColor: \"#9a9a9a\",\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n// #########################################\r\n// // // used inside src/views/Dashboard.js\r\n// #########################################\r\nlet phData = {\r\n  data1: (canvas) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n\r\n    gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\r\n    gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\r\n    gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\"); //blue colors\r\n\r\n    return {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: \"My First dataset\",\r\n          fill: true,\r\n          backgroundColor: gradientStroke,\r\n          borderColor: \"#1f8ef1\",\r\n          borderWidth: 2,\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          pointBackgroundColor: \"#1f8ef1\",\r\n          pointBorderColor: \"rgba(255,255,255,0)\",\r\n          pointHoverBackgroundColor: \"#1f8ef1\",\r\n          pointBorderWidth: 20,\r\n          pointHoverRadius: 4,\r\n          pointHoverBorderWidth: 15,\r\n          pointRadius: 4,\r\n          data: [0, 5, 10, 15, 20, 25, 30, 35, 40],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  options: chart1_2_options,\r\n};\r\n\r\n\r\nlet chartExample1 = {\r\n  data1: (canvas) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n\r\n    gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\r\n    gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\r\n    gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\"); //blue colors\r\n\r\n    return {\r\n      labels: [\r\n        \"01\",\r\n        \"3\",\r\n        \"5\",\r\n        \"7\",\r\n        \"9\",\r\n        \"11\",\r\n        \"13\",\r\n        \"15\",\r\n        \"17\",\r\n        \"19\",\r\n        \"21\",\r\n        \"23\",\r\n        '25',\r\n        '27',\r\n        '29',\r\n        '31'\r\n      ],\r\n      datasets: [\r\n        {\r\n          label: \"My First dataset\",\r\n          fill: true,\r\n          backgroundColor: gradientStroke,\r\n          borderColor: \"#1f8ef1\",\r\n          borderWidth: 2,\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          pointBackgroundColor: \"#1f8ef1\",\r\n          pointBorderColor: \"rgba(255,255,255,0)\",\r\n          pointHoverBackgroundColor: \"#1f8ef1\",\r\n          pointBorderWidth: 20,\r\n          pointHoverRadius: 4,\r\n          pointHoverBorderWidth: 15,\r\n          pointRadius: 4,\r\n          data: [0, 5, 10, 15, 20, 25, 30, 35, 40],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  data2: (canvas) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n\r\n    gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\r\n    gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\r\n    gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\"); //blue colors\r\n\r\n    return {\r\n      labels: [\r\n        \"JAN\",\r\n        \"FEB\",\r\n        \"MAR\",\r\n        \"APR\",\r\n        \"MAY\",\r\n        \"JUN\",\r\n        \"JUL\",\r\n        \"AUG\",\r\n        \"SEP\",\r\n        \"OCT\",\r\n        \"NOV\",\r\n        \"DEC\",\r\n      ],\r\n      datasets: [\r\n        {\r\n          label: \"My First dataset\",\r\n          fill: true,\r\n          backgroundColor: gradientStroke,\r\n          borderColor: \"#1f8ef1\",\r\n          borderWidth: 2,\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          pointBackgroundColor: \"#1f8ef1\",\r\n          pointBorderColor: \"rgba(255,255,255,0)\",\r\n          pointHoverBackgroundColor: \"#1f8ef1\",\r\n          pointBorderWidth: 20,\r\n          pointHoverRadius: 4,\r\n          pointHoverBorderWidth: 15,\r\n          pointRadius: 4,\r\n          data: [80, 120, 105, 110, 95, 105, 90, 100, 80, 95, 70, 120],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  data3: (canvas) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n\r\n    gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\r\n    gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\r\n    gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\"); //blue colors\r\n\r\n    return {\r\n      labels: [\r\n        \"JAN\",\r\n        \"FEB\",\r\n        \"MAR\",\r\n        \"APR\",\r\n        \"MAY\",\r\n        \"JUN\",\r\n        \"JUL\",\r\n        \"AUG\",\r\n        \"SEP\",\r\n        \"OCT\",\r\n        \"NOV\",\r\n        \"DEC\",\r\n      ],\r\n      datasets: [\r\n        {\r\n          label: \"pH & Temp. (Celcius)\",\r\n          fill: true,\r\n          backgroundColor: gradientStroke,\r\n          borderColor: \"#1f8ef1\",\r\n          borderWidth: 2,\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          pointBackgroundColor: \"#1f8ef1\",\r\n          pointBorderColor: \"rgba(255,255,255,0)\",\r\n          pointHoverBackgroundColor: \"#1f8ef1\",\r\n          pointBorderWidth: 20,\r\n          pointHoverRadius: 4,\r\n          pointHoverBorderWidth: 15,\r\n          pointRadius: 4,\r\n          data: [60, 80, 65, 130, 80, 105, 90, 130, 70, 115, 60, 130],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  options: chart1_2_options,\r\n};\r\n\r\n// #########################################\r\n// // // used inside src/views/Dashboard.js\r\n// #########################################\r\nlet chartExample2 = {\r\n  data: (canvas) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n\r\n    gradientStroke.addColorStop(1, \"rgba(29,140,248,0.2)\");\r\n    gradientStroke.addColorStop(0.4, \"rgba(29,140,248,0.0)\");\r\n    gradientStroke.addColorStop(0, \"rgba(29,140,248,0)\"); //blue colors\r\n\r\n    return {\r\n      labels: [\"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"],\r\n      datasets: [\r\n        {\r\n          label: \"Data\",\r\n          fill: true,\r\n          backgroundColor: gradientStroke,\r\n          borderColor: \"#1f8ef1\",\r\n          borderWidth: 2,\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          pointBackgroundColor: \"#1f8ef1\",\r\n          pointBorderColor: \"rgba(255,255,255,0)\",\r\n          pointHoverBackgroundColor: \"#1f8ef1\",\r\n          pointBorderWidth: 20,\r\n          pointHoverRadius: 4,\r\n          pointHoverBorderWidth: 15,\r\n          pointRadius: 4,\r\n          data: [80, 100, 70, 80, 120, 80],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  options: chart1_2_options,\r\n};\r\n\r\n// #########################################\r\n// // // used inside src/views/Dashboard.js\r\n// #########################################\r\nlet chartExample3 = {\r\n  data: (canvas) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n\r\n    gradientStroke.addColorStop(1, \"rgba(72,72,176,0.1)\");\r\n    gradientStroke.addColorStop(0.4, \"rgba(72,72,176,0.0)\");\r\n    gradientStroke.addColorStop(0, \"rgba(119,52,169,0)\"); //purple colors\r\n\r\n    return {\r\n      labels: [\"USA\", \"GER\", \"AUS\", \"UK\", \"RO\", \"BR\"],\r\n      datasets: [\r\n        {\r\n          label: \"Countries\",\r\n          fill: true,\r\n          backgroundColor: gradientStroke,\r\n          hoverBackgroundColor: gradientStroke,\r\n          borderColor: \"#d048b6\",\r\n          borderWidth: 2,\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          data: [53, 20, 10, 80, 100, 45],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  options: {\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n      display: false,\r\n    },\r\n    tooltips: {\r\n      backgroundColor: \"#f5f5f5\",\r\n      titleFontColor: \"#333\",\r\n      bodyFontColor: \"#666\",\r\n      bodySpacing: 4,\r\n      xPadding: 12,\r\n      mode: \"nearest\",\r\n      intersect: 0,\r\n      position: \"nearest\",\r\n    },\r\n    responsive: true,\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            drawBorder: false,\r\n            color: \"rgba(225,78,202,0.1)\",\r\n            zeroLineColor: \"transparent\",\r\n          },\r\n          ticks: {\r\n            suggestedMin: 60,\r\n            suggestedMax: 120,\r\n            padding: 20,\r\n            fontColor: \"#9e9e9e\",\r\n          },\r\n        },\r\n      ],\r\n      xAxes: [\r\n        {\r\n          gridLines: {\r\n            drawBorder: false,\r\n            color: \"rgba(225,78,202,0.1)\",\r\n            zeroLineColor: \"transparent\",\r\n          },\r\n          ticks: {\r\n            padding: 20,\r\n            fontColor: \"#9e9e9e\",\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n};\r\n\r\n// #########################################\r\n// // // used inside src/views/Dashboard.js\r\n// #########################################\r\nconst chartExample4 = {\r\n  data: (canvas) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    let gradientStroke = ctx.createLinearGradient(0, 230, 0, 50);\r\n\r\n    gradientStroke.addColorStop(1, \"rgba(66,134,121,0.15)\");\r\n    gradientStroke.addColorStop(0.4, \"rgba(66,134,121,0.0)\"); //green colors\r\n    gradientStroke.addColorStop(0, \"rgba(66,134,121,0)\"); //green colors\r\n\r\n    return {\r\n      labels: [\"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\"],\r\n      datasets: [\r\n        {\r\n          label: \"My First dataset\",\r\n          fill: true,\r\n          backgroundColor: gradientStroke,\r\n          borderColor: \"#00d6b4\",\r\n          borderWidth: 2,\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          pointBackgroundColor: \"#00d6b4\",\r\n          pointBorderColor: \"rgba(255,255,255,0)\",\r\n          pointHoverBackgroundColor: \"#00d6b4\",\r\n          pointBorderWidth: 20,\r\n          pointHoverRadius: 4,\r\n          pointHoverBorderWidth: 15,\r\n          pointRadius: 4,\r\n          data: [90, 27, 60, 12, 80],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  options: {\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n      display: false,\r\n    },\r\n\r\n    tooltips: {\r\n      backgroundColor: \"#f5f5f5\",\r\n      titleFontColor: \"#333\",\r\n      bodyFontColor: \"#666\",\r\n      bodySpacing: 4,\r\n      xPadding: 12,\r\n      mode: \"nearest\",\r\n      intersect: 0,\r\n      position: \"nearest\",\r\n    },\r\n    responsive: true,\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          barPercentage: 1.6,\r\n          gridLines: {\r\n            drawBorder: false,\r\n            color: \"rgba(29,140,248,0.0)\",\r\n            zeroLineColor: \"transparent\",\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'pH & Temp. (0C)'\r\n          },\r\n          ticks: {\r\n            suggestedMin: 50,\r\n            suggestedMax: 125,\r\n            padding: 20,\r\n            fontColor: \"#9e9e9e\",\r\n          },\r\n        },\r\n      ],\r\n\r\n      xAxes: [\r\n        {\r\n          barPercentage: 1.6,\r\n          gridLines: {\r\n            drawBorder: false,\r\n            color: \"rgba(0,242,195,0.1)\",\r\n            zeroLineColor: \"transparent\",\r\n          },\r\n          ticks: {\r\n            padding: 20,\r\n            fontColor: \"#9e9e9e\",\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Time'\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n};\r\n\r\nmodule.exports = {\r\n  chartExample1, // in src/views/Dashboard.js\r\n  chartExample2, // in src/views/Dashboard.js\r\n  chartExample3, // in src/views/Dashboard.js\r\n  chartExample4, // in src/views/Dashboard.js\r\n};\r\n","C:\\Users\\dma\\workshop\\pg-dg-web-app\\app\\view\\src\\components\\MailTo\\MailTo.js",[],{"ruleId":"277","severity":1,"message":"278","line":20,"column":10,"nodeType":"279","messageId":"280","endLine":20,"endColumn":23},{"ruleId":"277","severity":1,"message":"281","line":23,"column":8,"nodeType":"279","messageId":"280","endLine":23,"endColumn":17},{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","replacedBy":"285"},{"ruleId":"277","severity":1,"message":"286","line":3,"column":25,"nodeType":"279","messageId":"280","endLine":3,"endColumn":33},{"ruleId":"277","severity":1,"message":"287","line":11,"column":8,"nodeType":"279","messageId":"280","endLine":11,"endColumn":19},{"ruleId":"277","severity":1,"message":"288","line":19,"column":23,"nodeType":"279","messageId":"280","endLine":19,"endColumn":34},{"ruleId":"277","severity":1,"message":"289","line":21,"column":10,"nodeType":"279","messageId":"280","endLine":21,"endColumn":17},{"ruleId":"277","severity":1,"message":"290","line":22,"column":10,"nodeType":"279","messageId":"280","endLine":22,"endColumn":31},{"ruleId":"277","severity":1,"message":"291","line":23,"column":10,"nodeType":"279","messageId":"280","endLine":23,"endColumn":24},{"ruleId":"292","severity":1,"message":"293","line":71,"column":23,"nodeType":"294","messageId":"295","endLine":71,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":80,"column":5,"nodeType":"298","endLine":80,"endColumn":7,"suggestions":"299"},{"ruleId":"277","severity":1,"message":"286","line":4,"column":16,"nodeType":"279","messageId":"280","endLine":4,"endColumn":24},{"ruleId":"277","severity":1,"message":"300","line":11,"column":5,"nodeType":"279","messageId":"280","endLine":11,"endColumn":10},{"ruleId":"277","severity":1,"message":"301","line":13,"column":5,"nodeType":"279","messageId":"280","endLine":13,"endColumn":8},{"ruleId":"277","severity":1,"message":"290","line":22,"column":10,"nodeType":"279","messageId":"280","endLine":22,"endColumn":31},{"ruleId":"277","severity":1,"message":"302","line":34,"column":30,"nodeType":"279","messageId":"280","endLine":34,"endColumn":43},{"ruleId":"303","severity":1,"message":"304","line":106,"column":41,"nodeType":"305","endLine":110,"endColumn":43},{"ruleId":"277","severity":1,"message":"306","line":2,"column":10,"nodeType":"279","messageId":"280","endLine":2,"endColumn":23},{"ruleId":"277","severity":1,"message":"289","line":3,"column":22,"nodeType":"279","messageId":"280","endLine":3,"endColumn":29},{"ruleId":"277","severity":1,"message":"307","line":2,"column":8,"nodeType":"279","messageId":"280","endLine":2,"endColumn":13},{"ruleId":"277","severity":1,"message":"308","line":9,"column":3,"nodeType":"279","messageId":"280","endLine":9,"endColumn":9},{"ruleId":"277","severity":1,"message":"309","line":16,"column":3,"nodeType":"279","messageId":"280","endLine":16,"endColumn":13},{"ruleId":"277","severity":1,"message":"310","line":17,"column":3,"nodeType":"279","messageId":"280","endLine":17,"endColumn":14},{"ruleId":"311","severity":1,"message":"312","line":28,"column":11,"nodeType":"305","messageId":"313","endLine":31,"endColumn":12,"fix":"314"},{"ruleId":"277","severity":1,"message":"315","line":10,"column":26,"nodeType":"279","messageId":"280","endLine":10,"endColumn":43},{"ruleId":"277","severity":1,"message":"316","line":12,"column":3,"nodeType":"279","messageId":"280","endLine":12,"endColumn":25},{"ruleId":"277","severity":1,"message":"317","line":13,"column":3,"nodeType":"279","messageId":"280","endLine":13,"endColumn":19},{"ruleId":"277","severity":1,"message":"318","line":39,"column":9,"nodeType":"279","messageId":"280","endLine":39,"endColumn":20},{"ruleId":"277","severity":1,"message":"319","line":42,"column":19,"nodeType":"279","messageId":"280","endLine":42,"endColumn":28},{"ruleId":"311","severity":1,"message":"312","line":48,"column":9,"nodeType":"305","messageId":"313","endLine":53,"endColumn":10,"fix":"320"},{"ruleId":"311","severity":1,"message":"312","line":60,"column":9,"nodeType":"305","messageId":"313","endLine":65,"endColumn":10,"fix":"321"},{"ruleId":"277","severity":1,"message":"308","line":4,"column":10,"nodeType":"279","messageId":"280","endLine":4,"endColumn":16},{"ruleId":"292","severity":1,"message":"322","line":2,"column":98,"nodeType":"294","messageId":"295","endLine":2,"endColumn":100},{"ruleId":"292","severity":1,"message":"293","line":243,"column":21,"nodeType":"294","messageId":"295","endLine":243,"endColumn":23},{"ruleId":"292","severity":1,"message":"293","line":266,"column":25,"nodeType":"294","messageId":"295","endLine":266,"endColumn":27},{"ruleId":"292","severity":1,"message":"293","line":289,"column":25,"nodeType":"294","messageId":"295","endLine":289,"endColumn":27},{"ruleId":"277","severity":1,"message":"323","line":1,"column":28,"nodeType":"279","messageId":"280","endLine":1,"endColumn":34},{"ruleId":"277","severity":1,"message":"324","line":2,"column":8,"nodeType":"279","messageId":"280","endLine":2,"endColumn":15},{"ruleId":"277","severity":1,"message":"325","line":4,"column":8,"nodeType":"279","messageId":"280","endLine":4,"endColumn":18},{"ruleId":"277","severity":1,"message":"326","line":6,"column":10,"nodeType":"279","messageId":"280","endLine":6,"endColumn":14},{"ruleId":"277","severity":1,"message":"327","line":6,"column":16,"nodeType":"279","messageId":"280","endLine":6,"endColumn":19},{"ruleId":"277","severity":1,"message":"328","line":8,"column":8,"nodeType":"279","messageId":"280","endLine":8,"endColumn":19},{"ruleId":"277","severity":1,"message":"329","line":9,"column":8,"nodeType":"279","messageId":"280","endLine":9,"endColumn":17},{"ruleId":"277","severity":1,"message":"330","line":10,"column":8,"nodeType":"279","messageId":"280","endLine":10,"endColumn":19},{"ruleId":"277","severity":1,"message":"331","line":14,"column":3,"nodeType":"279","messageId":"280","endLine":14,"endColumn":14},{"ruleId":"277","severity":1,"message":"332","line":18,"column":3,"nodeType":"279","messageId":"280","endLine":18,"endColumn":6},{"ruleId":"277","severity":1,"message":"333","line":19,"column":3,"nodeType":"279","messageId":"280","endLine":19,"endColumn":10},{"ruleId":"277","severity":1,"message":"334","line":20,"column":3,"nodeType":"279","messageId":"280","endLine":20,"endColumn":16},{"ruleId":"277","severity":1,"message":"335","line":22,"column":3,"nodeType":"279","messageId":"280","endLine":22,"endColumn":15},{"ruleId":"277","severity":1,"message":"336","line":24,"column":3,"nodeType":"279","messageId":"280","endLine":24,"endColumn":13},{"ruleId":"277","severity":1,"message":"337","line":25,"column":3,"nodeType":"279","messageId":"280","endLine":25,"endColumn":10},{"ruleId":"277","severity":1,"message":"338","line":30,"column":3,"nodeType":"279","messageId":"280","endLine":30,"endColumn":14},{"ruleId":"277","severity":1,"message":"339","line":33,"column":3,"nodeType":"279","messageId":"280","endLine":33,"endColumn":8},{"ruleId":"277","severity":1,"message":"340","line":34,"column":3,"nodeType":"279","messageId":"280","endLine":34,"endColumn":8},{"ruleId":"277","severity":1,"message":"341","line":40,"column":3,"nodeType":"279","messageId":"280","endLine":40,"endColumn":16},{"ruleId":"277","severity":1,"message":"342","line":41,"column":3,"nodeType":"279","messageId":"280","endLine":41,"endColumn":16},{"ruleId":"277","severity":1,"message":"343","line":43,"column":3,"nodeType":"279","messageId":"280","endLine":43,"endColumn":16},{"ruleId":"277","severity":1,"message":"344","line":48,"column":8,"nodeType":"279","messageId":"280","endLine":48,"endColumn":19},{"ruleId":"277","severity":1,"message":"345","line":52,"column":10,"nodeType":"279","messageId":"280","endLine":52,"endColumn":29},{"ruleId":"277","severity":1,"message":"346","line":55,"column":8,"nodeType":"279","messageId":"280","endLine":55,"endColumn":13},{"ruleId":"277","severity":1,"message":"302","line":63,"column":28,"nodeType":"279","messageId":"280","endLine":63,"endColumn":41},{"ruleId":"277","severity":1,"message":"347","line":64,"column":7,"nodeType":"279","messageId":"280","endLine":64,"endColumn":15},{"ruleId":"348","severity":1,"message":"349","line":74,"column":3,"nodeType":"350","messageId":"351","endLine":74,"endColumn":41},{"ruleId":"277","severity":1,"message":"352","line":84,"column":10,"nodeType":"279","messageId":"280","endLine":84,"endColumn":17},{"ruleId":"277","severity":1,"message":"353","line":84,"column":18,"nodeType":"279","messageId":"280","endLine":84,"endColumn":28},{"ruleId":"277","severity":1,"message":"354","line":121,"column":9,"nodeType":"279","messageId":"280","endLine":121,"endColumn":38},{"ruleId":"277","severity":1,"message":"324","line":2,"column":8,"nodeType":"279","messageId":"280","endLine":2,"endColumn":15},{"ruleId":"277","severity":1,"message":"327","line":6,"column":16,"nodeType":"279","messageId":"280","endLine":6,"endColumn":19},{"ruleId":"277","severity":1,"message":"355","line":10,"column":8,"nodeType":"279","messageId":"280","endLine":10,"endColumn":16},{"ruleId":"277","severity":1,"message":"330","line":12,"column":8,"nodeType":"279","messageId":"280","endLine":12,"endColumn":19},{"ruleId":"277","severity":1,"message":"334","line":43,"column":3,"nodeType":"279","messageId":"280","endLine":43,"endColumn":16},{"ruleId":"277","severity":1,"message":"338","line":51,"column":3,"nodeType":"279","messageId":"280","endLine":51,"endColumn":14},{"ruleId":"277","severity":1,"message":"335","line":51,"column":15,"nodeType":"279","messageId":"280","endLine":51,"endColumn":27},{"ruleId":"277","severity":1,"message":"339","line":54,"column":3,"nodeType":"279","messageId":"280","endLine":54,"endColumn":8},{"ruleId":"277","severity":1,"message":"356","line":55,"column":59,"nodeType":"279","messageId":"280","endLine":55,"endColumn":73},{"ruleId":"277","severity":1,"message":"341","line":61,"column":3,"nodeType":"279","messageId":"280","endLine":61,"endColumn":16},{"ruleId":"277","severity":1,"message":"342","line":62,"column":3,"nodeType":"279","messageId":"280","endLine":62,"endColumn":16},{"ruleId":"277","severity":1,"message":"343","line":64,"column":3,"nodeType":"279","messageId":"280","endLine":64,"endColumn":16},{"ruleId":"277","severity":1,"message":"345","line":73,"column":34,"nodeType":"279","messageId":"280","endLine":73,"endColumn":53},{"ruleId":"277","severity":1,"message":"346","line":76,"column":8,"nodeType":"279","messageId":"280","endLine":76,"endColumn":13},{"ruleId":"277","severity":1,"message":"357","line":77,"column":9,"nodeType":"279","messageId":"280","endLine":77,"endColumn":17},{"ruleId":"277","severity":1,"message":"358","line":78,"column":8,"nodeType":"279","messageId":"280","endLine":78,"endColumn":24},{"ruleId":"277","severity":1,"message":"359","line":81,"column":8,"nodeType":"279","messageId":"280","endLine":81,"endColumn":11},{"ruleId":"277","severity":1,"message":"360","line":82,"column":8,"nodeType":"279","messageId":"280","endLine":82,"endColumn":17},{"ruleId":"277","severity":1,"message":"361","line":83,"column":8,"nodeType":"279","messageId":"280","endLine":83,"endColumn":18},{"ruleId":"277","severity":1,"message":"362","line":86,"column":7,"nodeType":"279","messageId":"280","endLine":86,"endColumn":18},{"ruleId":"277","severity":1,"message":"363","line":91,"column":10,"nodeType":"279","messageId":"280","endLine":91,"endColumn":26},{"ruleId":"277","severity":1,"message":"364","line":91,"column":27,"nodeType":"279","messageId":"280","endLine":91,"endColumn":46},{"ruleId":"277","severity":1,"message":"365","line":92,"column":9,"nodeType":"279","messageId":"280","endLine":92,"endColumn":22},{"ruleId":"277","severity":1,"message":"366","line":94,"column":10,"nodeType":"279","messageId":"280","endLine":94,"endColumn":22},{"ruleId":"277","severity":1,"message":"302","line":97,"column":28,"nodeType":"279","messageId":"280","endLine":97,"endColumn":41},{"ruleId":"277","severity":1,"message":"367","line":101,"column":9,"nodeType":"279","messageId":"280","endLine":101,"endColumn":28},{"ruleId":"348","severity":1,"message":"349","line":106,"column":3,"nodeType":"350","messageId":"351","endLine":106,"endColumn":41},{"ruleId":"277","severity":1,"message":"368","line":107,"column":12,"nodeType":"279","messageId":"280","endLine":107,"endColumn":20},{"ruleId":"277","severity":1,"message":"369","line":124,"column":9,"nodeType":"279","messageId":"280","endLine":124,"endColumn":23},{"ruleId":"277","severity":1,"message":"370","line":139,"column":9,"nodeType":"279","messageId":"280","endLine":139,"endColumn":27},{"ruleId":"371","severity":1,"message":"372","line":139,"column":28,"nodeType":"298","messageId":"373","endLine":139,"endColumn":72},{"ruleId":"277","severity":1,"message":"374","line":144,"column":10,"nodeType":"279","messageId":"280","endLine":144,"endColumn":18},{"ruleId":"277","severity":1,"message":"375","line":144,"column":20,"nodeType":"279","messageId":"280","endLine":144,"endColumn":31},{"ruleId":"277","severity":1,"message":"376","line":145,"column":10,"nodeType":"279","messageId":"280","endLine":145,"endColumn":17},{"ruleId":"277","severity":1,"message":"377","line":145,"column":19,"nodeType":"279","messageId":"280","endLine":145,"endColumn":29},{"ruleId":"277","severity":1,"message":"378","line":147,"column":16,"nodeType":"279","messageId":"280","endLine":147,"endColumn":23},{"ruleId":"277","severity":1,"message":"379","line":250,"column":9,"nodeType":"279","messageId":"280","endLine":250,"endColumn":25},{"ruleId":"277","severity":1,"message":"380","line":283,"column":9,"nodeType":"279","messageId":"280","endLine":283,"endColumn":30},{"ruleId":"292","severity":1,"message":"293","line":284,"column":25,"nodeType":"294","messageId":"295","endLine":284,"endColumn":27},{"ruleId":"277","severity":1,"message":"381","line":293,"column":9,"nodeType":"279","messageId":"280","endLine":293,"endColumn":29},{"ruleId":"382","severity":1,"message":"383","line":295,"column":5,"nodeType":"384","messageId":"385","endLine":307,"endColumn":6},{"ruleId":"292","severity":1,"message":"293","line":347,"column":29,"nodeType":"294","messageId":"295","endLine":347,"endColumn":31},{"ruleId":"296","severity":1,"message":"386","line":351,"column":5,"nodeType":"298","endLine":351,"endColumn":7,"suggestions":"387"},{"ruleId":"292","severity":1,"message":"293","line":462,"column":110,"nodeType":"294","messageId":"295","endLine":462,"endColumn":112},{"ruleId":"303","severity":1,"message":"304","line":462,"column":122,"nodeType":"305","endLine":462,"endColumn":167},{"ruleId":"303","severity":1,"message":"304","line":462,"column":168,"nodeType":"305","endLine":462,"endColumn":214},{"ruleId":"292","severity":1,"message":"322","line":495,"column":39,"nodeType":"294","messageId":"295","endLine":495,"endColumn":41},{"ruleId":"303","severity":1,"message":"304","line":511,"column":118,"nodeType":"305","endLine":511,"endColumn":174},{"ruleId":"277","severity":1,"message":"388","line":45,"column":12,"nodeType":"279","messageId":"280","endLine":45,"endColumn":17},{"ruleId":"277","severity":1,"message":"389","line":1,"column":15,"nodeType":"279","messageId":"280","endLine":1,"endColumn":25},{"ruleId":"277","severity":1,"message":"390","line":2,"column":17,"nodeType":"279","messageId":"280","endLine":2,"endColumn":26},{"ruleId":"277","severity":1,"message":"391","line":5,"column":12,"nodeType":"279","messageId":"280","endLine":5,"endColumn":19},{"ruleId":"277","severity":1,"message":"392","line":5,"column":20,"nodeType":"279","messageId":"280","endLine":5,"endColumn":30},{"ruleId":"277","severity":1,"message":"393","line":6,"column":11,"nodeType":"279","messageId":"280","endLine":6,"endColumn":24},{"ruleId":"277","severity":1,"message":"394","line":9,"column":11,"nodeType":"279","messageId":"280","endLine":9,"endColumn":28},{"ruleId":"277","severity":1,"message":"395","line":34,"column":7,"nodeType":"279","messageId":"280","endLine":34,"endColumn":24},{"ruleId":"277","severity":1,"message":"396","line":37,"column":10,"nodeType":"279","messageId":"280","endLine":37,"endColumn":23},{"ruleId":"277","severity":1,"message":"338","line":9,"column":5,"nodeType":"279","messageId":"280","endLine":9,"endColumn":16},{"ruleId":"277","severity":1,"message":"302","line":23,"column":30,"nodeType":"279","messageId":"280","endLine":23,"endColumn":43},{"ruleId":"277","severity":1,"message":"397","line":86,"column":5,"nodeType":"279","messageId":"280","endLine":86,"endColumn":11},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'RTLLayout' is defined but never used.","no-native-reassign",["398"],"no-negated-in-lhs",["399"],"'Redirect' is defined but never used.","'FixedPlugin' is defined but never used.","'useSelector' is defined but never used.","'USER_ID' is defined but never used.","'fetchUserDetailsThunk' is defined but never used.","'fetchUsersData' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["400"],"'Table' is defined but never used.","'Col' is defined but never used.","'closeSnackbar' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'pg_generators' is defined but never used.","'Users' is defined but never used.","'Button' is defined but never used.","'InputGroup' is defined but never used.","'NavbarBrand' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"401","text":"402"},"'ReactstrapNavLink' is defined but never used.","'BackgroundColorContext' is defined but never used.","'backgroundColors' is defined but never used.","'linkOnClick' is assigned a value but never used.","'rtlActive' is assigned a value but never used.",{"range":"403","text":"402"},{"range":"404","text":"402"},"Expected '!==' and instead saw '!='.","'useRef' is defined but never used.","'UpArrow' is defined but never used.","'classNames' is defined but never used.","'Line' is defined but never used.","'Bar' is defined but never used.","'SafePondDot' is defined but never used.","'PaperIcon' is defined but never used.","'RefreshIcon' is defined but never used.","'ButtonGroup' is defined but never used.","'Nav' is defined but never used.","'NavLink' is defined but never used.","'ButtonToolbar' is defined but never used.","'ButtonToggle' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'ModalFooter' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'chartExample1' is defined but never used.","'chartExample2' is defined but never used.","'chartExample4' is defined but never used.","'OwlCarousel' is defined but never used.","'generate_graph_data' is defined but never used.","'store' is defined but never used.","'location' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'swap_user_verification_status' is assigned a value but never used.","'calendar' is defined but never used.","'ButtonDropdown' is defined but never used.","'scroller' is defined but never used.","'OwnerUpdateModal' is defined but never used.","'Map' is defined but never used.","'GoogleMap' is defined but never used.","'AgentTrack' is defined but never used.","'scrollToRef' is assigned a value but never used.","'showPersonUpdate' is assigned a value but never used.","'setShowPersonUpdate' is assigned a value but never used.","'executeScroll' is assigned a value but never used.","'bigChartData' is assigned a value but never used.","'portable_generators' is assigned a value but never used.","'onChange' is defined but never used.","'toggleTaskForm' is assigned a value but never used.","'table_view_options' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'pdfTitle' is assigned a value but never used.","'setPdfTitle' is assigned a value but never used.","'pdfData' is assigned a value but never used.","'setPdfData' is assigned a value but never used.","'setData' is assigned a value but never used.","'show_device_data' is assigned a value but never used.","'show_pond_device_data' is assigned a value but never used.","'show_generators_data' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook React.useEffect has missing dependencies: 'enqueueSnackbar' and 'location.state?.from'. Either include them or remove the dependency array.",["405"],"'print' is defined but never used.","'InfoWindow' is defined but never used.","'Component' is defined but never used.","'markers' is assigned a value but never used.","'setMarkers' is assigned a value but never used.","'onMarkerClick' is assigned a value but never used.","'onInfoWindowClose' is assigned a value but never used.","'AnyReactComponent' is assigned a value but never used.","'user_position' is assigned a value but never used.","'phData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"406","fix":"407"},[925,925]," rel=\"noreferrer\"",[1607,1607],[1934,1934],{"desc":"408","fix":"409"},"Update the dependencies array to be: [dispatch, history]",{"range":"410","text":"411"},"Update the dependencies array to be: [enqueueSnackbar, location.state?.from]",{"range":"412","text":"413"},[2998,3000],"[dispatch, history]",[11541,11543],"[enqueueSnackbar, location.state?.from]"]